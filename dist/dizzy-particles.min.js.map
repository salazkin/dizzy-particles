{"version":3,"file":"dizzy-particles.min.js","sources":["../node_modules/dizzy-utils/dist/dizzy-utils.js","../src/index.js"],"sourcesContent":["const degreeToRadians = (degrees) => {\r\n    return degrees * Math.PI / 180;\r\n};\r\nconst radiansToDegree = (radians) => {\r\n    return radians * 180 / Math.PI;\r\n};\r\nconst interpolate = (t, v1, v2, shortestDist = false) => {\r\n    if (shortestDist) {\r\n        const a = Math.min(v1, v2);\r\n        const b = Math.max(v1, v2);\r\n        const dist1 = b - a;\r\n        const dist2 = 1 - b + a;\r\n        if (dist1 < dist2) {\r\n            return a + dist1 * t;\r\n        }\r\n        else {\r\n            return (b + dist2 * t) % 1;\r\n        }\r\n    }\r\n    return v1 + (v2 - v1) * t;\r\n};\r\nconst getPositionOnLine = (t, p0, p1, target) => {\r\n    const x = interpolate(t, p0.x, p1.x);\r\n    const y = interpolate(t, p0.y, p1.y);\r\n    if (target !== undefined) {\r\n        target.x = x;\r\n        target.y = y;\r\n    }\r\n    else {\r\n        return { x, y };\r\n    }\r\n};\r\nconst getPositionOnCubicBezierCurve = (t, p1, p2, cp1, cp2, target) => {\r\n    const t2 = t * t;\r\n    const t3 = t * t * t;\r\n    const x = Math.pow(1 - t, 3) * p1.x + 3 * Math.pow(1 - t, 2) * t * cp1.x + 3 * (1 - t) * t2 * cp2.x + t3 * p2.x;\r\n    const y = Math.pow(1 - t, 3) * p1.y + 3 * Math.pow(1 - t, 2) * t * cp1.y + 3 * (1 - t) * t2 * cp2.y + t3 * p2.y;\r\n    if (target !== undefined) {\r\n        target.x = x;\r\n        target.y = y;\r\n    }\r\n    else {\r\n        return { x, y };\r\n    }\r\n};\r\nconst getRotationOnCubicBezierCurve = (t, p1, p2, cp1, cp2) => {\r\n    const t2 = t * t;\r\n    const dx = 3 * Math.pow(1 - t, 2) * (cp1.x - p1.x) + 6 * (1 - t) * t * (cp2.x - cp1.x) + 3 * t2 * (p1.y - cp2.x);\r\n    const dy = 3 * Math.pow(1 - t, 2) * (cp1.y - p1.y) + 6 * (1 - t) * t * (cp2.y - cp1.y) + 3 * t2 * (p2.y - cp2.y);\r\n    return Math.atan2(dx, dy);\r\n};\r\nconst hexToHsl = (hex) => {\r\n    const r = parseInt(hex.substring(hex.length - 6, hex.length - 4), 16) / 255;\r\n    const g = parseInt(hex.substring(hex.length - 4, hex.length - 2), 16) / 255;\r\n    const b = parseInt(hex.substring(hex.length - 2, hex.length), 16) / 255;\r\n    const max = Math.max(r, g, b);\r\n    const min = Math.min(r, g, b);\r\n    let l = (max + min) / 2;\r\n    let s = 0;\r\n    let h = 0;\r\n    if (max !== min) {\r\n        const d = max - min;\r\n        s = l < 0.5 ? d / (max + min) : d / (2 - max - min);\r\n        if (r == max) {\r\n            h = (g - b) / d + (g < b ? 6 : 0);\r\n        }\r\n        else if (g == max) {\r\n            h = 2 + (b - r) / d;\r\n        }\r\n        else {\r\n            h = 4 + (r - g) / d;\r\n        }\r\n    }\r\n    h /= 6;\r\n    return [h, s, l];\r\n};\r\nconst hexToRgb = (color) => {\r\n    const arr = [];\r\n    for (let i = 2; i >= 0; i--) {\r\n        const c = color.substring(color.length - i * 2 - 2, color.length - i * 2);\r\n        arr.push(parseInt(c, 16));\r\n    }\r\n    return arr;\r\n};\r\nconst hslToHex = (arr) => {\r\n    let h = arr[0];\r\n    let s = arr[1];\r\n    let l = arr[2];\r\n    let r, g, b;\r\n    if (s == 0) {\r\n        r = g = b = l;\r\n    }\r\n    else {\r\n        let q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n        let p = 2 * l - q;\r\n        const hue = (t, p, q) => {\r\n            if (t < 0) {\r\n                t += 1;\r\n            }\r\n            if (t > 1) {\r\n                t -= 1;\r\n            }\r\n            if (t < 1 / 6) {\r\n                return p + (q - p) * 6 * t;\r\n            }\r\n            if (t < 1 / 2) {\r\n                return q;\r\n            }\r\n            if (t < 2 / 3) {\r\n                return p + (q - p) * (2 / 3 - t) * 6;\r\n            }\r\n            return p;\r\n        };\r\n        r = Math.round(hue(h + 1 / 3, p, q) * 255);\r\n        g = Math.round(hue(h, p, q) * 255);\r\n        b = Math.round(hue(h - 1 / 3, p, q) * 255);\r\n    }\r\n    const c = (v) => {\r\n        return (\"0\" + v.toString(16)).slice(-2);\r\n    };\r\n    return \"0x\" + c(r) + c(g) + c(b);\r\n};\n\nexport { degreeToRadians, getPositionOnCubicBezierCurve, getPositionOnLine, getRotationOnCubicBezierCurve, hexToHsl, hexToRgb, hslToHex, interpolate, radiansToDegree };\n//# sourceMappingURL=dizzy-utils.js.map\n","import { degreeToRadians, getPositionOnCubicBezierCurve, getPositionOnLine, hexToHsl, hslToHex, interpolate } from \"../node_modules/dizzy-utils/dist/dizzy-utils\";\r\nclass Point {\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n    }\r\n}\r\n;\r\nclass Particles {\r\n    constructor(totalParticles, loop, config, cb) {\r\n        this.totalParticles = totalParticles;\r\n        this.loop = loop;\r\n        this.config = config;\r\n        this.cb = cb;\r\n        this.particles = [];\r\n        this.time = 0;\r\n        this.delay = 0;\r\n        this.posStart = { x: 0, y: 0 };\r\n        this.posEnd = { x: 0, y: 0 };\r\n        this.curveLen = 20;\r\n        this.curveSeg = 1 / (this.curveLen - 1);\r\n        this.correctedTintArr = null;\r\n        this.createParticles(totalParticles);\r\n    }\r\n    createParticles(totalParticles) {\r\n        for (let i = 0; i < totalParticles; i++) {\r\n            const particleResult = this.createParticle();\r\n            particleResult.alpha = 0;\r\n            const particleData = {\r\n                result: particleResult,\r\n                updated: false,\r\n                delay: this.getDelay(),\r\n                duration: this.getDuration()\r\n            };\r\n            this.particles.push(particleData);\r\n        }\r\n    }\r\n    createParticle() {\r\n        return { x: 0, y: 0, alpha: 1, scaleX: 1, scaleY: 1, rotation: 0, tint: \"0xffffff\" };\r\n    }\r\n    update(dt) {\r\n        const time = this.time;\r\n        let count = 0;\r\n        this.particles.forEach(particleData => {\r\n            if (particleData.duration === 0) {\r\n                count++;\r\n                return;\r\n            }\r\n            const t = (time - particleData.delay) / particleData.duration;\r\n            if (t >= 0 && t <= 1) {\r\n                particleData.result.alpha = 1;\r\n                if (!particleData.updated) {\r\n                    particleData.updated = true;\r\n                    this.updateParticleData(particleData);\r\n                }\r\n                this.updateResult(particleData, t);\r\n            }\r\n            else {\r\n                particleData.updated = false;\r\n                particleData.result.alpha = 0;\r\n            }\r\n            if (time >= particleData.delay + particleData.duration) {\r\n                if (this.loop) {\r\n                    particleData.duration = this.getDuration();\r\n                    particleData.delay = this.getDelay();\r\n                }\r\n                else {\r\n                    count++;\r\n                    particleData.duration = 0;\r\n                    particleData.result.alpha = 0;\r\n                }\r\n            }\r\n        });\r\n        this.delay = 0;\r\n        this.time += dt;\r\n        if (count >= this.particles.length) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n    reset() {\r\n        this.time = 0;\r\n        this.delay = 0;\r\n        this.particles.forEach(particleData => {\r\n            particleData.updated = false;\r\n            particleData.delay = this.getDelay(),\r\n                particleData.duration = this.getDuration();\r\n            if (particleData.result) {\r\n                particleData.result.alpha = 0;\r\n                particleData.result.x = 0;\r\n                particleData.result.y = 0;\r\n            }\r\n        });\r\n    }\r\n    onComplete() {\r\n        if (this.cb) {\r\n            this.cb();\r\n        }\r\n    }\r\n    set posStartX(value) {\r\n        this.posStart.x = value;\r\n    }\r\n    set posStartY(value) {\r\n        this.posStart.y = value;\r\n    }\r\n    set posEndX(value) {\r\n        this.posEnd.x = value;\r\n    }\r\n    set posEndY(value) {\r\n        this.posEnd.y = value;\r\n    }\r\n    setPosStart(x, y) {\r\n        this.posStart.x = x;\r\n        this.posStart.y = y;\r\n    }\r\n    setPosEnd(x, y) {\r\n        this.posEnd.x = x;\r\n        this.posEnd.y = y;\r\n    }\r\n    setData(config) {\r\n        this.correctedTintArr = null;\r\n        this.config = config;\r\n    }\r\n    getDuration() {\r\n        return this.getValue(\"duration\");\r\n    }\r\n    getDelay() {\r\n        this.delay += this.getValue(\"delay\");\r\n        return this.time + this.delay;\r\n    }\r\n    updateParticleData(particleData) {\r\n        const startX = this.posStart.x + this.getValue(\"posStartOffsetX\");\r\n        const startY = this.posStart.y + this.getValue(\"posStartOffsetY\");\r\n        const endX = this.posEnd.x + this.getValue(\"posEndOffsetX\");\r\n        const endY = this.posEnd.y + this.getValue(\"posEndOffsetY\");\r\n        particleData.posStart = { x: startX, y: startY };\r\n        particleData.posEnd = { x: endX, y: endY };\r\n        particleData.cp1 = null;\r\n        particleData.cp2 = null;\r\n        const cp1Mag = this.getValue(\"posControlPoint1Mag\");\r\n        const cp2Mag = this.getValue(\"posControlPoint2Mag\");\r\n        if (cp1Mag !== 0 || cp2Mag !== 0) {\r\n            let dx = endX - startX;\r\n            let dy = endY - startY;\r\n            let ang = Math.atan2(dx, dy);\r\n            let angle1 = ang + degreeToRadians(this.getValue(\"posControlPoint1Angle\"));\r\n            let angle2 = -(Math.PI - ang) + degreeToRadians(this.getValue(\"posControlPoint2Angle\"));\r\n            let dist = Math.sqrt(dx * dx + dy * dy);\r\n            particleData.cp1 = { x: startX + Math.sin(angle1) * dist * cp1Mag, y: startY + Math.cos(angle1) * dist * cp1Mag };\r\n            particleData.cp2 = { x: endX + Math.sin(angle2) * dist * cp2Mag, y: endY + Math.cos(angle2) * dist * cp2Mag };\r\n            if (particleData.curve) {\r\n                particleData.curve.length = 0;\r\n            }\r\n            else {\r\n                particleData.curve = [];\r\n            }\r\n        }\r\n        else {\r\n            particleData.curve = undefined;\r\n        }\r\n        particleData.alphaFrom = this.getValue(\"alphaFrom\");\r\n        particleData.alphaTo = this.getValue(\"alphaTo\");\r\n        particleData.alphaYoYo = this.getValue(\"alphaYoYo\");\r\n        if (this.config.tint) {\r\n            if (this.config.tintInterpolate && Array.isArray(this.config.tint) && this.config.tint.length > 1) {\r\n                if (!this.correctedTintArr) {\r\n                    this.correctedTintArr = getInterpolatedColors(this.config.tint, 5);\r\n                }\r\n                particleData.tint = this.correctedTintArr;\r\n            }\r\n            else {\r\n                particleData.tint = this.getValue(\"tint\");\r\n            }\r\n        }\r\n        particleData.scaleFrom = this.getValue(\"scaleFrom\");\r\n        particleData.scaleTo = this.getValue(\"scaleTo\");\r\n        particleData.scaleYoYo = this.getValue(\"scaleYoYo\");\r\n        particleData.rotationSpeed = degreeToRadians(this.getValue(\"rotationSpeed\"));\r\n    }\r\n    getValue(key) {\r\n        if (Array.isArray(this.config[key])) {\r\n            const arr = this.config[key];\r\n            const index = arr.length > 1 ? Math.floor(Math.random() * arr.length) : 0;\r\n            if (Array.isArray(arr[index])) {\r\n                const min = arr[index][0];\r\n                const max = arr[index][1];\r\n                return Math.random() * (max - min) + min;\r\n            }\r\n            else {\r\n                return arr[index];\r\n            }\r\n        }\r\n        else {\r\n            return this.config[key] || 0;\r\n        }\r\n    }\r\n    updateResult(particleData, t) {\r\n        const yoyoTime = t * (1 - t) * 2;\r\n        const result = particleData.result;\r\n        result.alpha = particleData.alphaFrom + (particleData.alphaTo - particleData.alphaFrom) * (particleData.alphaYoYo ? yoyoTime : t);\r\n        result.scaleX = result.scaleY = interpolate(particleData.scaleYoYo ? yoyoTime : t, particleData.scaleFrom, particleData.scaleTo);\r\n        if (particleData.curve) {\r\n            const from = Math.floor(t / this.curveSeg);\r\n            const to = from + 1;\r\n            if (particleData.curve[from] === undefined) {\r\n                particleData.curve[from] = from === 0 ? particleData.posStart : new Point();\r\n            }\r\n            if (particleData.curve[to] === undefined) {\r\n                particleData.curve[to] = to === this.curveLen - 1 ? particleData.posEnd : new Point();\r\n            }\r\n            if (from !== 0) {\r\n                getPositionOnCubicBezierCurve(from * this.curveSeg, particleData.posStart, particleData.posEnd, particleData.cp1, particleData.cp2, particleData.curve[from]);\r\n            }\r\n            if (to !== this.curveLen - 1) {\r\n                getPositionOnCubicBezierCurve(to * this.curveSeg, particleData.posStart, particleData.posEnd, particleData.cp1, particleData.cp2, particleData.curve[to]);\r\n            }\r\n            getPositionOnLine((t % this.curveSeg) / this.curveSeg, particleData.curve[from], particleData.curve[to], result);\r\n        }\r\n        else {\r\n            getPositionOnLine(t, particleData.posStart, particleData.posEnd, result);\r\n        }\r\n        if (particleData.rotationSpeed !== 0) {\r\n            result.rotation += particleData.rotationSpeed;\r\n        }\r\n        else {\r\n            result.rotation = 0;\r\n        }\r\n        if (particleData.tint) {\r\n            if (Array.isArray(particleData.tint)) {\r\n                const seg = 1 / (particleData.tint.length - 1);\r\n                result.tint = particleData.tint[Math.floor(t / seg)];\r\n            }\r\n            else {\r\n                result.tint = particleData.tint;\r\n            }\r\n        }\r\n    }\r\n    kill() {\r\n        this.particles.length = 0;\r\n        this.cb = null;\r\n    }\r\n}\r\nconst getInterpolatedColors = (hexArr, steps) => {\r\n    const arr = hexArr.map(hex => hexToHsl(hex));\r\n    const out = [];\r\n    const step = 1 / steps;\r\n    for (let i = 0; i < steps + 1; i++) {\r\n        const t = Math.min(step * i, 1);\r\n        const seg = 1 / (arr.length - 1);\r\n        const index = Math.min(Math.floor(t / seg), arr.length - 2);\r\n        const c1 = arr[index];\r\n        const c2 = arr[index + 1];\r\n        out.push(hslToHex(c1.map((c, i) => interpolate(t, c, c2[i], i === 0))));\r\n    }\r\n    return out;\r\n};\r\nexport { Particles };\r\n"],"names":["degreeToRadians","degrees","Math","PI","interpolate","t","v1","v2","shortestDist","a","min","b","max","dist1","dist2","getPositionOnLine","p0","p1","target","x","y","undefined","getPositionOnCubicBezierCurve","p2","cp1","cp2","t2","t3","pow","hslToHex","arr","r","g","h","s","l","q","p","hue","round","c","v","toString","slice","Point","[object Object]","this","Particles","totalParticles","loop","config","cb","particles","time","delay","posStart","posEnd","curveLen","curveSeg","correctedTintArr","createParticles","i","particleResult","createParticle","alpha","particleData","result","updated","getDelay","duration","getDuration","push","scaleX","scaleY","rotation","tint","dt","count","forEach","updateParticleData","updateResult","length","onComplete","posStartX","value","posStartY","posEndX","posEndY","getValue","startX","startY","endX","endY","cp1Mag","cp2Mag","dx","dy","ang","atan2","angle1","angle2","dist","sqrt","sin","cos","curve","alphaFrom","alphaTo","alphaYoYo","tintInterpolate","Array","isArray","getInterpolatedColors","scaleFrom","scaleTo","scaleYoYo","rotationSpeed","key","index","floor","random","yoyoTime","from","to","seg","hexArr","steps","map","hex","parseInt","substring","d","hexToHsl","out","step","c1","c2"],"mappings":"AAAA,MAAMA,EAAmBC,GACdA,EAAUC,KAAKC,GAAK,IAKzBC,EAAc,CAACC,EAAGC,EAAIC,EAAIC,GAAe,KAC3C,GAAIA,EAAc,CACd,MAAMC,EAAIP,KAAKQ,IAAIJ,EAAIC,GACjBI,EAAIT,KAAKU,IAAIN,EAAIC,GACjBM,EAAQF,EAAIF,EACZK,EAAQ,EAAIH,EAAIF,EACtB,OAAII,EAAQC,EACDL,EAAII,EAAQR,GAGXM,EAAIG,EAAQT,GAAK,EAGjC,OAAOC,GAAMC,EAAKD,GAAMD,GAEtBU,EAAoB,CAACV,EAAGW,EAAIC,EAAIC,KAClC,MAAMC,EAAIf,EAAYC,EAAGW,EAAGG,EAAGF,EAAGE,GAC5BC,EAAIhB,EAAYC,EAAGW,EAAGI,EAAGH,EAAGG,GAClC,QAAeC,IAAXH,EAKA,MAAO,CAAEC,EAAAA,EAAGC,EAAAA,GAJZF,EAAOC,EAAIA,EACXD,EAAOE,EAAIA,GAMbE,EAAgC,CAACjB,EAAGY,EAAIM,EAAIC,EAAKC,EAAKP,KACxD,MAAMQ,EAAKrB,EAAIA,EACTsB,EAAKtB,EAAIA,EAAIA,EACbc,EAAIjB,KAAK0B,IAAI,EAAIvB,EAAG,GAAKY,EAAGE,EAAI,EAAIjB,KAAK0B,IAAI,EAAIvB,EAAG,GAAKA,EAAImB,EAAIL,EAAI,GAAK,EAAId,GAAKqB,EAAKD,EAAIN,EAAIQ,EAAKJ,EAAGJ,EACxGC,EAAIlB,KAAK0B,IAAI,EAAIvB,EAAG,GAAKY,EAAGG,EAAI,EAAIlB,KAAK0B,IAAI,EAAIvB,EAAG,GAAKA,EAAImB,EAAIJ,EAAI,GAAK,EAAIf,GAAKqB,EAAKD,EAAIL,EAAIO,EAAKJ,EAAGH,EAC9G,QAAeC,IAAXH,EAKA,MAAO,CAAEC,EAAAA,EAAGC,EAAAA,GAJZF,EAAOC,EAAIA,EACXD,EAAOE,EAAIA,GA6CbS,EAAYC,IACd,IAGIC,EAAGC,EAAGrB,EAHNsB,EAAIH,EAAI,GACRI,EAAIJ,EAAI,GACRK,EAAIL,EAAI,GAEZ,GAAS,GAALI,EACAH,EAAIC,EAAIrB,EAAIwB,MAEX,CACD,IAAIC,EAAID,EAAI,GAAMA,GAAK,EAAID,GAAKC,EAAID,EAAIC,EAAID,EACxCG,EAAI,EAAIF,EAAIC,EAChB,MAAME,EAAM,CAACjC,EAAGgC,EAAGD,KACX/B,EAAI,IACJA,GAAK,GAELA,EAAI,IACJA,GAAK,GAELA,EAAI,EAAI,EACDgC,EAAc,GAATD,EAAIC,GAAShC,EAEzBA,EAAI,GACG+B,EAEP/B,EAAI,EAAI,EACDgC,GAAKD,EAAIC,IAAM,EAAI,EAAIhC,GAAK,EAEhCgC,GAEXN,EAAI7B,KAAKqC,MAA6B,IAAvBD,EAAIL,EAAI,EAAI,EAAGI,EAAGD,IACjCJ,EAAI9B,KAAKqC,MAAqB,IAAfD,EAAIL,EAAGI,EAAGD,IACzBzB,EAAIT,KAAKqC,MAA6B,IAAvBD,EAAIL,EAAI,EAAI,EAAGI,EAAGD,IAErC,MAAMI,EAAKC,IACC,IAAMA,EAAEC,SAAS,KAAKC,OAAO,GAEzC,MAAO,KAAOH,EAAET,GAAKS,EAAER,GAAKQ,EAAE7B,ICvHlC,MAAMiC,EACFC,cACIC,KAAK3B,EAAI,EACT2B,KAAK1B,EAAI,GAIjB,MAAM2B,EACFF,YAAYG,EAAgBC,EAAMC,EAAQC,GACtCL,KAAKE,eAAiBA,EACtBF,KAAKG,KAAOA,EACZH,KAAKI,OAASA,EACdJ,KAAKK,GAAKA,EACVL,KAAKM,UAAY,GACjBN,KAAKO,KAAO,EACZP,KAAKQ,MAAQ,EACbR,KAAKS,SAAW,CAAEpC,EAAG,EAAGC,EAAG,GAC3B0B,KAAKU,OAAS,CAAErC,EAAG,EAAGC,EAAG,GACzB0B,KAAKW,SAAW,GAChBX,KAAKY,SAAW,GAAKZ,KAAKW,SAAW,GACrCX,KAAKa,iBAAmB,KACxBb,KAAKc,gBAAgBZ,GAEzBH,gBAAgBG,GACZ,IAAK,IAAIa,EAAI,EAAGA,EAAIb,EAAgBa,IAAK,CACrC,MAAMC,EAAiBhB,KAAKiB,iBAC5BD,EAAeE,MAAQ,EACvB,MAAMC,EAAe,CACjBC,OAAQJ,EACRK,SAAS,EACTb,MAAOR,KAAKsB,WACZC,SAAUvB,KAAKwB,eAEnBxB,KAAKM,UAAUmB,KAAKN,IAG5BpB,iBACI,MAAO,CAAE1B,EAAG,EAAGC,EAAG,EAAG4C,MAAO,EAAGQ,OAAQ,EAAGC,OAAQ,EAAGC,SAAU,EAAGC,KAAM,YAE5E9B,OAAO+B,GACH,MAAMvB,EAAOP,KAAKO,KAClB,IAAIwB,EAAQ,EACZ/B,KAAKM,UAAU0B,SAAQb,IACnB,GAA8B,IAA1BA,EAAaI,SAEb,YADAQ,IAGJ,MAAMxE,GAAKgD,EAAOY,EAAaX,OAASW,EAAaI,SACjDhE,GAAK,GAAKA,GAAK,GACf4D,EAAaC,OAAOF,MAAQ,EACvBC,EAAaE,UACdF,EAAaE,SAAU,EACvBrB,KAAKiC,mBAAmBd,IAE5BnB,KAAKkC,aAAaf,EAAc5D,KAGhC4D,EAAaE,SAAU,EACvBF,EAAaC,OAAOF,MAAQ,GAE5BX,GAAQY,EAAaX,MAAQW,EAAaI,WACtCvB,KAAKG,MACLgB,EAAaI,SAAWvB,KAAKwB,cAC7BL,EAAaX,MAAQR,KAAKsB,aAG1BS,IACAZ,EAAaI,SAAW,EACxBJ,EAAaC,OAAOF,MAAQ,OAIxClB,KAAKQ,MAAQ,EACbR,KAAKO,MAAQuB,EACTC,GAAS/B,KAAKM,UAAU6B,QACxBnC,KAAKoC,aAGbrC,QACIC,KAAKO,KAAO,EACZP,KAAKQ,MAAQ,EACbR,KAAKM,UAAU0B,SAAQb,IACnBA,EAAaE,SAAU,EACvBF,EAAaX,MAAQR,KAAKsB,WACtBH,EAAaI,SAAWvB,KAAKwB,cAC7BL,EAAaC,SACbD,EAAaC,OAAOF,MAAQ,EAC5BC,EAAaC,OAAO/C,EAAI,EACxB8C,EAAaC,OAAO9C,EAAI,MAIpCyB,aACQC,KAAKK,IACLL,KAAKK,KAGbgC,cAAcC,GACVtC,KAAKS,SAASpC,EAAIiE,EAEtBC,cAAcD,GACVtC,KAAKS,SAASnC,EAAIgE,EAEtBE,YAAYF,GACRtC,KAAKU,OAAOrC,EAAIiE,EAEpBG,YAAYH,GACRtC,KAAKU,OAAOpC,EAAIgE,EAEpBvC,YAAY1B,EAAGC,GACX0B,KAAKS,SAASpC,EAAIA,EAClB2B,KAAKS,SAASnC,EAAIA,EAEtByB,UAAU1B,EAAGC,GACT0B,KAAKU,OAAOrC,EAAIA,EAChB2B,KAAKU,OAAOpC,EAAIA,EAEpByB,QAAQK,GACJJ,KAAKa,iBAAmB,KACxBb,KAAKI,OAASA,EAElBL,cACI,OAAOC,KAAK0C,SAAS,YAEzB3C,WAEI,OADAC,KAAKQ,OAASR,KAAK0C,SAAS,SACrB1C,KAAKO,KAAOP,KAAKQ,MAE5BT,mBAAmBoB,GACf,MAAMwB,EAAS3C,KAAKS,SAASpC,EAAI2B,KAAK0C,SAAS,mBACzCE,EAAS5C,KAAKS,SAASnC,EAAI0B,KAAK0C,SAAS,mBACzCG,EAAO7C,KAAKU,OAAOrC,EAAI2B,KAAK0C,SAAS,iBACrCI,EAAO9C,KAAKU,OAAOpC,EAAI0B,KAAK0C,SAAS,iBAC3CvB,EAAaV,SAAW,CAAEpC,EAAGsE,EAAQrE,EAAGsE,GACxCzB,EAAaT,OAAS,CAAErC,EAAGwE,EAAMvE,EAAGwE,GACpC3B,EAAazC,IAAM,KACnByC,EAAaxC,IAAM,KACnB,MAAMoE,EAAS/C,KAAK0C,SAAS,uBACvBM,EAAShD,KAAK0C,SAAS,uBAC7B,GAAe,IAAXK,GAA2B,IAAXC,EAAc,CAC9B,IAAIC,EAAKJ,EAAOF,EACZO,EAAKJ,EAAOF,EACZO,EAAM/F,KAAKgG,MAAMH,EAAIC,GACrBG,EAASF,EAAMjG,EAAgB8C,KAAK0C,SAAS,0BAC7CY,IAAWlG,KAAKC,GAAK8F,GAAOjG,EAAgB8C,KAAK0C,SAAS,0BAC1Da,EAAOnG,KAAKoG,KAAKP,EAAKA,EAAKC,EAAKA,GACpC/B,EAAazC,IAAM,CAAEL,EAAGsE,EAASvF,KAAKqG,IAAIJ,GAAUE,EAAOR,EAAQzE,EAAGsE,EAASxF,KAAKsG,IAAIL,GAAUE,EAAOR,GACzG5B,EAAaxC,IAAM,CAAEN,EAAGwE,EAAOzF,KAAKqG,IAAIH,GAAUC,EAAOP,EAAQ1E,EAAGwE,EAAO1F,KAAKsG,IAAIJ,GAAUC,EAAOP,GACjG7B,EAAawC,MACbxC,EAAawC,MAAMxB,OAAS,EAG5BhB,EAAawC,MAAQ,QAIzBxC,EAAawC,WAAQpF,EAEzB4C,EAAayC,UAAY5D,KAAK0C,SAAS,aACvCvB,EAAa0C,QAAU7D,KAAK0C,SAAS,WACrCvB,EAAa2C,UAAY9D,KAAK0C,SAAS,aACnC1C,KAAKI,OAAOyB,OACR7B,KAAKI,OAAO2D,iBAAmBC,MAAMC,QAAQjE,KAAKI,OAAOyB,OAAS7B,KAAKI,OAAOyB,KAAKM,OAAS,GACvFnC,KAAKa,mBACNb,KAAKa,iBAAmBqD,EAAsBlE,KAAKI,OAAOyB,KAAM,IAEpEV,EAAaU,KAAO7B,KAAKa,kBAGzBM,EAAaU,KAAO7B,KAAK0C,SAAS,SAG1CvB,EAAagD,UAAYnE,KAAK0C,SAAS,aACvCvB,EAAaiD,QAAUpE,KAAK0C,SAAS,WACrCvB,EAAakD,UAAYrE,KAAK0C,SAAS,aACvCvB,EAAamD,cAAgBpH,EAAgB8C,KAAK0C,SAAS,kBAE/D3C,SAASwE,GACL,GAAIP,MAAMC,QAAQjE,KAAKI,OAAOmE,IAAO,CACjC,MAAMvF,EAAMgB,KAAKI,OAAOmE,GAClBC,EAAQxF,EAAImD,OAAS,EAAI/E,KAAKqH,MAAMrH,KAAKsH,SAAW1F,EAAImD,QAAU,EACxE,GAAI6B,MAAMC,QAAQjF,EAAIwF,IAAS,CAC3B,MAAM5G,EAAMoB,EAAIwF,GAAO,GACjB1G,EAAMkB,EAAIwF,GAAO,GACvB,OAAOpH,KAAKsH,UAAY5G,EAAMF,GAAOA,EAGrC,OAAOoB,EAAIwF,GAIf,OAAOxE,KAAKI,OAAOmE,IAAQ,EAGnCxE,aAAaoB,EAAc5D,GACvB,MAAMoH,EAAWpH,GAAK,EAAIA,GAAK,EACzB6D,EAASD,EAAaC,OAG5B,GAFAA,EAAOF,MAAQC,EAAayC,WAAazC,EAAa0C,QAAU1C,EAAayC,YAAczC,EAAa2C,UAAYa,EAAWpH,GAC/H6D,EAAOM,OAASN,EAAOO,OAASrE,EAAY6D,EAAakD,UAAYM,EAAWpH,EAAG4D,EAAagD,UAAWhD,EAAaiD,SACpHjD,EAAawC,MAAO,CACpB,MAAMiB,EAAOxH,KAAKqH,MAAMlH,EAAIyC,KAAKY,UAC3BiE,EAAKD,EAAO,OACerG,IAA7B4C,EAAawC,MAAMiB,KACnBzD,EAAawC,MAAMiB,GAAiB,IAATA,EAAazD,EAAaV,SAAW,IAAIX,QAEzCvB,IAA3B4C,EAAawC,MAAMkB,KACnB1D,EAAawC,MAAMkB,GAAMA,IAAO7E,KAAKW,SAAW,EAAIQ,EAAaT,OAAS,IAAIZ,GAErE,IAAT8E,GACApG,EAA8BoG,EAAO5E,KAAKY,SAAUO,EAAaV,SAAUU,EAAaT,OAAQS,EAAazC,IAAKyC,EAAaxC,IAAKwC,EAAawC,MAAMiB,IAEvJC,IAAO7E,KAAKW,SAAW,GACvBnC,EAA8BqG,EAAK7E,KAAKY,SAAUO,EAAaV,SAAUU,EAAaT,OAAQS,EAAazC,IAAKyC,EAAaxC,IAAKwC,EAAawC,MAAMkB,IAEzJ5G,EAAmBV,EAAIyC,KAAKY,SAAYZ,KAAKY,SAAUO,EAAawC,MAAMiB,GAAOzD,EAAawC,MAAMkB,GAAKzD,QAGzGnD,EAAkBV,EAAG4D,EAAaV,SAAUU,EAAaT,OAAQU,GAQrE,GANmC,IAA/BD,EAAamD,cACblD,EAAOQ,UAAYT,EAAamD,cAGhClD,EAAOQ,SAAW,EAElBT,EAAaU,KACb,GAAImC,MAAMC,QAAQ9C,EAAaU,MAAO,CAClC,MAAMiD,EAAM,GAAK3D,EAAaU,KAAKM,OAAS,GAC5Cf,EAAOS,KAAOV,EAAaU,KAAKzE,KAAKqH,MAAMlH,EAAIuH,SAG/C1D,EAAOS,KAAOV,EAAaU,KAIvC9B,OACIC,KAAKM,UAAU6B,OAAS,EACxBnC,KAAKK,GAAK,MAGlB,MAAM6D,EAAwB,CAACa,EAAQC,KACnC,MAAMhG,EAAM+F,EAAOE,KAAIC,GD/LV,CAACA,IACd,MAAMjG,EAAIkG,SAASD,EAAIE,UAAUF,EAAI/C,OAAS,EAAG+C,EAAI/C,OAAS,GAAI,IAAM,IAClEjD,EAAIiG,SAASD,EAAIE,UAAUF,EAAI/C,OAAS,EAAG+C,EAAI/C,OAAS,GAAI,IAAM,IAClEtE,EAAIsH,SAASD,EAAIE,UAAUF,EAAI/C,OAAS,EAAG+C,EAAI/C,QAAS,IAAM,IAC9DrE,EAAMV,KAAKU,IAAImB,EAAGC,EAAGrB,GACrBD,EAAMR,KAAKQ,IAAIqB,EAAGC,EAAGrB,GAC3B,IAAIwB,GAAKvB,EAAMF,GAAO,EAClBwB,EAAI,EACJD,EAAI,EACR,GAAIrB,IAAQF,EAAK,CACb,MAAMyH,EAAIvH,EAAMF,EAChBwB,EAAIC,EAAI,GAAMgG,GAAKvH,EAAMF,GAAOyH,GAAK,EAAIvH,EAAMF,GAE3CuB,EADAF,GAAKnB,GACAoB,EAAIrB,GAAKwH,GAAKnG,EAAIrB,EAAI,EAAI,GAE1BqB,GAAKpB,EACN,GAAKD,EAAIoB,GAAKoG,EAGd,GAAKpG,EAAIC,GAAKmG,EAI1B,OADAlG,GAAK,EACE,CAACA,EAAGC,EAAGC,ICwKgBiG,CAASJ,KACjCK,EAAM,GACNC,EAAO,EAAIR,EACjB,IAAK,IAAIjE,EAAI,EAAGA,EAAIiE,EAAQ,EAAGjE,IAAK,CAChC,MAAMxD,EAAIH,KAAKQ,IAAI4H,EAAOzE,EAAG,GACvB+D,EAAM,GAAK9F,EAAImD,OAAS,GACxBqC,EAAQpH,KAAKQ,IAAIR,KAAKqH,MAAMlH,EAAIuH,GAAM9F,EAAImD,OAAS,GACnDsD,EAAKzG,EAAIwF,GACTkB,EAAK1G,EAAIwF,EAAQ,GACvBe,EAAI9D,KAAK1C,EAAS0G,EAAGR,KAAI,CAACvF,EAAGqB,IAAMzD,EAAYC,EAAGmC,EAAGgG,EAAG3E,GAAU,IAANA,OAEhE,OAAOwE"}