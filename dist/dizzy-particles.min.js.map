{"version":3,"file":"dizzy-particles.min.js","sources":["../src/index.js"],"sourcesContent":["const degreeToRadians = (degrees) => {\r\n    return degrees * Math.PI / 180;\r\n};\r\nconst lerp = (v1, v2, t) => {\r\n    return v1 + (v2 - v1) * t;\r\n};\r\nconst lerpAngle = (v1, v2, t, range = 360) => {\r\n    let result;\r\n    const dt = v2 - v1;\r\n    const mid = range * 0.5;\r\n    if (dt < -mid) {\r\n        v2 += range;\r\n        result = lerp(v1, v2, t);\r\n        if (result >= range) {\r\n            result -= range;\r\n        }\r\n    }\r\n    else if (dt > mid) {\r\n        v2 -= range;\r\n        result = lerp(v1, v2, t);\r\n        if (result < 0) {\r\n            result += range;\r\n        }\r\n    }\r\n    else {\r\n        result = lerp(v1, v2, t);\r\n    }\r\n    return result;\r\n};\r\nconst lerpPoint = (p0, p1, t, target) => {\r\n    const x = lerp(p0.x, p1.x, t);\r\n    const y = lerp(p0.y, p1.y, t);\r\n    if (target) {\r\n        target.x = x;\r\n        target.y = y;\r\n    }\r\n    else {\r\n        return { x, y };\r\n    }\r\n};\r\nconst lerpCurve = (p1, cp1, cp2, p2, t, target) => {\r\n    const t2 = t * t;\r\n    const t3 = t * t * t;\r\n    const x = Math.pow(1 - t, 3) * p1.x + 3 * Math.pow(1 - t, 2) * t * cp1.x + 3 * (1 - t) * t2 * cp2.x + t3 * p2.x;\r\n    const y = Math.pow(1 - t, 3) * p1.y + 3 * Math.pow(1 - t, 2) * t * cp1.y + 3 * (1 - t) * t2 * cp2.y + t3 * p2.y;\r\n    if (target) {\r\n        target.x = x;\r\n        target.y = y;\r\n    }\r\n    else {\r\n        return { x, y };\r\n    }\r\n};\r\nconst hexToHsl = (hex) => {\r\n    const r = (hex >> 16) / 255;\r\n    const g = (hex >> 8 & 0xff) / 255;\r\n    const b = (hex & 0xff) / 255;\r\n    const max = Math.max(r, g, b);\r\n    const min = Math.min(r, g, b);\r\n    let l = (max + min) / 2;\r\n    let s = 0;\r\n    let h = 0;\r\n    if (max !== min) {\r\n        const d = max - min;\r\n        s = l < 0.5 ? d / (max + min) : d / (2 - max - min);\r\n        if (r == max) {\r\n            h = (g - b) / d + (g < b ? 6 : 0);\r\n        }\r\n        else if (g == max) {\r\n            h = 2 + (b - r) / d;\r\n        }\r\n        else {\r\n            h = 4 + (r - g) / d;\r\n        }\r\n    }\r\n    h /= 6;\r\n    return [h, s, l];\r\n};\r\nconst rgbToHex = (r, g, b) => {\r\n    return r << 16 | g << 8 | b;\r\n};\r\nconst hslToHex = (h, s, l) => {\r\n    let r, g, b;\r\n    if (s == 0) {\r\n        r = g = b = l;\r\n    }\r\n    else {\r\n        let q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n        let p = 2 * l - q;\r\n        const hue = (t, p, q) => {\r\n            if (t < 0) {\r\n                t += 1;\r\n            }\r\n            if (t > 1) {\r\n                t -= 1;\r\n            }\r\n            if (t < 1 / 6) {\r\n                return p + (q - p) * 6 * t;\r\n            }\r\n            if (t < 1 / 2) {\r\n                return q;\r\n            }\r\n            if (t < 2 / 3) {\r\n                return p + (q - p) * (2 / 3 - t) * 6;\r\n            }\r\n            return p;\r\n        };\r\n        r = Math.round(hue(h + 1 / 3, p, q) * 255);\r\n        g = Math.round(hue(h, p, q) * 255);\r\n        b = Math.round(hue(h - 1 / 3, p, q) * 255);\r\n    }\r\n    return rgbToHex(r, g, b);\r\n};\r\nclass Point {\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n    }\r\n}\r\n;\r\nclass Particles {\r\n    constructor(totalParticles, loop, config, cb) {\r\n        this.totalParticles = totalParticles;\r\n        this.loop = loop;\r\n        this.config = config;\r\n        this.cb = cb;\r\n        this.particles = [];\r\n        this.time = 0;\r\n        this.delay = 0;\r\n        this.posStart = { x: 0, y: 0 };\r\n        this.posEnd = { x: 0, y: 0 };\r\n        this.curveLen = 20;\r\n        this.curveSeg = 1 / (this.curveLen - 1);\r\n        this.correctedTintArr = null;\r\n        this.createParticles(totalParticles);\r\n    }\r\n    createParticles(totalParticles) {\r\n        for (let i = 0; i < totalParticles; i++) {\r\n            const particleResult = this.createParticle();\r\n            particleResult.alpha = 0;\r\n            const particleData = {\r\n                result: particleResult,\r\n                updated: false,\r\n                delay: this.getDelay(),\r\n                duration: this.getDuration()\r\n            };\r\n            this.particles.push(particleData);\r\n        }\r\n    }\r\n    createParticle() {\r\n        return { x: 0, y: 0, alpha: 1, scaleX: 1, scaleY: 1, rotation: 0, tint: 0xffffff };\r\n    }\r\n    update(dt) {\r\n        const time = this.time;\r\n        let count = 0;\r\n        this.particles.forEach(particleData => {\r\n            if (particleData.duration === 0) {\r\n                count++;\r\n                return;\r\n            }\r\n            const t = (time - particleData.delay) / particleData.duration;\r\n            if (t >= 0 && t <= 1) {\r\n                particleData.result.alpha = 1;\r\n                if (!particleData.updated) {\r\n                    particleData.updated = true;\r\n                    this.updateParticleData(particleData);\r\n                }\r\n                this.updateResult(particleData, t);\r\n            }\r\n            else {\r\n                particleData.updated = false;\r\n                particleData.result.alpha = 0;\r\n            }\r\n            if (time >= particleData.delay + particleData.duration) {\r\n                if (this.loop) {\r\n                    particleData.duration = this.getDuration();\r\n                    particleData.delay = this.getDelay();\r\n                }\r\n                else {\r\n                    count++;\r\n                    particleData.duration = 0;\r\n                    particleData.result.alpha = 0;\r\n                }\r\n            }\r\n        });\r\n        this.delay = 0;\r\n        this.time += dt;\r\n        if (count >= this.particles.length) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n    reset() {\r\n        this.time = 0;\r\n        this.delay = 0;\r\n        this.particles.forEach(particleData => {\r\n            particleData.updated = false;\r\n            particleData.delay = this.getDelay(),\r\n                particleData.duration = this.getDuration();\r\n            if (particleData.result) {\r\n                particleData.result.alpha = 0;\r\n                particleData.result.x = 0;\r\n                particleData.result.y = 0;\r\n            }\r\n        });\r\n    }\r\n    onComplete() {\r\n        if (this.cb) {\r\n            this.cb();\r\n        }\r\n    }\r\n    set posStartX(value) {\r\n        this.posStart.x = value;\r\n    }\r\n    set posStartY(value) {\r\n        this.posStart.y = value;\r\n    }\r\n    set posEndX(value) {\r\n        this.posEnd.x = value;\r\n    }\r\n    set posEndY(value) {\r\n        this.posEnd.y = value;\r\n    }\r\n    setPosStart(x, y) {\r\n        this.posStart.x = x;\r\n        this.posStart.y = y;\r\n    }\r\n    setPosEnd(x, y) {\r\n        this.posEnd.x = x;\r\n        this.posEnd.y = y;\r\n    }\r\n    setData(config) {\r\n        this.correctedTintArr = null;\r\n        this.config = config;\r\n    }\r\n    getDuration() {\r\n        return this.getValue(\"duration\");\r\n    }\r\n    getDelay() {\r\n        this.delay += this.getValue(\"delay\");\r\n        return this.time + this.delay;\r\n    }\r\n    updateParticleData(particleData) {\r\n        const startX = this.posStart.x + this.getValue(\"posStartOffsetX\");\r\n        const startY = this.posStart.y + this.getValue(\"posStartOffsetY\");\r\n        const endX = this.posEnd.x + this.getValue(\"posEndOffsetX\");\r\n        const endY = this.posEnd.y + this.getValue(\"posEndOffsetY\");\r\n        particleData.posStart = { x: startX, y: startY };\r\n        particleData.posEnd = { x: endX, y: endY };\r\n        particleData.cp1 = null;\r\n        particleData.cp2 = null;\r\n        const cp1Mag = this.getValue(\"posControlPoint1Mag\");\r\n        const cp2Mag = this.getValue(\"posControlPoint2Mag\");\r\n        if (cp1Mag !== 0 || cp2Mag !== 0) {\r\n            const dx = endX - startX;\r\n            const dy = endY - startY;\r\n            const ang = Math.atan2(dx, dy);\r\n            const angle1 = ang + degreeToRadians(this.getValue(\"posControlPoint1Angle\"));\r\n            const angle2 = -(Math.PI - ang) + degreeToRadians(this.getValue(\"posControlPoint2Angle\"));\r\n            const dist = Math.sqrt(dx * dx + dy * dy);\r\n            particleData.cp1 = { x: startX + Math.sin(angle1) * dist * cp1Mag, y: startY + Math.cos(angle1) * dist * cp1Mag };\r\n            particleData.cp2 = { x: endX + Math.sin(angle2) * dist * cp2Mag, y: endY + Math.cos(angle2) * dist * cp2Mag };\r\n            if (particleData.curve) {\r\n                particleData.curve.length = 0;\r\n            }\r\n            else {\r\n                particleData.curve = [];\r\n            }\r\n        }\r\n        else {\r\n            particleData.curve = undefined;\r\n        }\r\n        particleData.alphaFrom = this.getValue(\"alphaFrom\");\r\n        particleData.alphaTo = this.getValue(\"alphaTo\");\r\n        particleData.alphaYoYo = this.getValue(\"alphaYoYo\");\r\n        if (this.config.tint) {\r\n            if (this.config.tintInterpolate && Array.isArray(this.config.tint) && this.config.tint.length > 1) {\r\n                if (!this.correctedTintArr) {\r\n                    this.correctedTintArr = getInterpolatedColors(this.config.tint, 10);\r\n                }\r\n                particleData.tint = this.correctedTintArr;\r\n            }\r\n            else {\r\n                particleData.tint = parseInt(this.getValue(\"tint\"));\r\n            }\r\n        }\r\n        particleData.scaleFrom = this.getValue(\"scaleFrom\");\r\n        particleData.scaleTo = this.getValue(\"scaleTo\");\r\n        particleData.scaleYoYo = this.getValue(\"scaleYoYo\");\r\n        particleData.rotationSpeed = degreeToRadians(this.getValue(\"rotationSpeed\"));\r\n    }\r\n    getValue(key) {\r\n        if (Array.isArray(this.config[key])) {\r\n            const arr = this.config[key];\r\n            const index = arr.length > 1 ? Math.floor(Math.random() * arr.length) : 0;\r\n            if (Array.isArray(arr[index])) {\r\n                const min = arr[index][0];\r\n                const max = arr[index][1];\r\n                return Math.random() * (max - min) + min;\r\n            }\r\n            else {\r\n                return arr[index];\r\n            }\r\n        }\r\n        else {\r\n            return this.config[key] || 0;\r\n        }\r\n    }\r\n    updateResult(particleData, t) {\r\n        const yoyoTime = t * (1 - t) * 2;\r\n        const result = particleData.result;\r\n        result.alpha = particleData.alphaFrom + (particleData.alphaTo - particleData.alphaFrom) * (particleData.alphaYoYo ? yoyoTime : t);\r\n        result.scaleX = result.scaleY = lerp(particleData.scaleFrom, particleData.scaleTo, particleData.scaleYoYo ? yoyoTime : t);\r\n        if (particleData.curve) {\r\n            const from = Math.floor(t / this.curveSeg);\r\n            const to = from + 1;\r\n            if (particleData.curve[from] === undefined) {\r\n                particleData.curve[from] = from === 0 ? particleData.posStart : new Point();\r\n            }\r\n            if (particleData.curve[to] === undefined) {\r\n                particleData.curve[to] = to === this.curveLen - 1 ? particleData.posEnd : new Point();\r\n            }\r\n            if (from !== 0) {\r\n                lerpCurve(particleData.posStart, particleData.cp1, particleData.cp2, particleData.posEnd, from * this.curveSeg, particleData.curve[from]);\r\n            }\r\n            if (to !== this.curveLen - 1) {\r\n                lerpCurve(particleData.posStart, particleData.cp1, particleData.cp2, particleData.posEnd, to * this.curveSeg, particleData.curve[to]);\r\n            }\r\n            lerpPoint(particleData.curve[from], particleData.curve[to], (t % this.curveSeg) / this.curveSeg, result);\r\n        }\r\n        else {\r\n            lerpPoint(particleData.posStart, particleData.posEnd, t, result);\r\n        }\r\n        if (particleData.rotationSpeed !== 0) {\r\n            result.rotation += particleData.rotationSpeed;\r\n        }\r\n        else {\r\n            result.rotation = 0;\r\n        }\r\n        if (particleData.tint) {\r\n            if (Array.isArray(particleData.tint)) {\r\n                const seg = 1 / (particleData.tint.length - 1);\r\n                result.tint = particleData.tint[Math.floor(t / seg)];\r\n            }\r\n            else {\r\n                result.tint = particleData.tint;\r\n            }\r\n        }\r\n    }\r\n    kill() {\r\n        this.particles.length = 0;\r\n        this.cb = null;\r\n    }\r\n}\r\nconst getInterpolatedColors = (hexArr, steps) => {\r\n    const arr = hexArr.map(hex => hexToHsl(parseInt(hex)));\r\n    const out = [];\r\n    const step = 1 / steps;\r\n    const seg = 1 / (arr.length - 1);\r\n    for (let i = 0; i < steps + 1; i++) {\r\n        const t = Math.min(step * i, 1);\r\n        const index = Math.min(Math.floor(t / seg), arr.length - 2);\r\n        const c1 = arr[index];\r\n        const c2 = arr[index + 1];\r\n        out.push(hslToHex(...c1.map((c, i) => lerpAngle(c, c2[i], t))));\r\n    }\r\n    return out;\r\n};\r\nexport { Particles };\r\n"],"names":["degreeToRadians","degrees","Math","PI","lerp","v1","v2","t","lerpAngle","range","result","dt","mid","lerpPoint","p0","p1","target","x","y","lerpCurve","cp1","cp2","p2","t2","t3","pow","hslToHex","h","s","l","r","g","b","q","p","hue","round","rgbToHex","Point","[object Object]","this","Particles","totalParticles","loop","config","cb","particles","time","delay","posStart","posEnd","curveLen","curveSeg","correctedTintArr","createParticles","i","particleResult","createParticle","alpha","particleData","updated","getDelay","duration","getDuration","push","scaleX","scaleY","rotation","tint","count","forEach","updateParticleData","updateResult","length","onComplete","posStartX","value","posStartY","posEndX","posEndY","getValue","startX","startY","endX","endY","cp1Mag","cp2Mag","dx","dy","ang","atan2","angle1","angle2","dist","sqrt","sin","cos","curve","undefined","alphaFrom","alphaTo","alphaYoYo","tintInterpolate","Array","isArray","getInterpolatedColors","parseInt","scaleFrom","scaleTo","scaleYoYo","rotationSpeed","key","arr","index","floor","random","min","max","yoyoTime","from","to","seg","hexArr","steps","map","hex","d","hexToHsl","out","step","c1","c2","c"],"mappings":"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"}