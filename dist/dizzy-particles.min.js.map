{"version":3,"file":"dizzy-particles.min.js","sources":["../src/index.js"],"sourcesContent":["import { degreeToRadians, getPositionOnCubicBezierCurve, getPositionOnLine, hexToHsl, hslToHex, interpolate, shortPathInterpolate } from \"dizzy-utils\";\r\nclass Point {\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n    }\r\n}\r\n;\r\nclass Particles {\r\n    constructor(totalParticles, loop, config, cb) {\r\n        this.totalParticles = totalParticles;\r\n        this.loop = loop;\r\n        this.config = config;\r\n        this.cb = cb;\r\n        this.particles = [];\r\n        this.time = 0;\r\n        this.delay = 0;\r\n        this.posStart = { x: 0, y: 0 };\r\n        this.posEnd = { x: 0, y: 0 };\r\n        this.curveLen = 20;\r\n        this.curveSeg = 1 / (this.curveLen - 1);\r\n        this.correctedTintArr = null;\r\n        this.createParticles(totalParticles);\r\n    }\r\n    createParticles(totalParticles) {\r\n        for (let i = 0; i < totalParticles; i++) {\r\n            const particleResult = this.createParticle();\r\n            particleResult.alpha = 0;\r\n            const particleData = {\r\n                result: particleResult,\r\n                updated: false,\r\n                delay: this.getDelay(),\r\n                duration: this.getDuration()\r\n            };\r\n            this.particles.push(particleData);\r\n        }\r\n    }\r\n    createParticle() {\r\n        return { x: 0, y: 0, alpha: 1, scaleX: 1, scaleY: 1, rotation: 0, tint: 0xffffff };\r\n    }\r\n    update(dt) {\r\n        const time = this.time;\r\n        let count = 0;\r\n        this.particles.forEach(particleData => {\r\n            if (particleData.duration === 0) {\r\n                count++;\r\n                return;\r\n            }\r\n            const t = (time - particleData.delay) / particleData.duration;\r\n            if (t >= 0 && t <= 1) {\r\n                particleData.result.alpha = 1;\r\n                if (!particleData.updated) {\r\n                    particleData.updated = true;\r\n                    this.updateParticleData(particleData);\r\n                }\r\n                this.updateResult(particleData, t);\r\n            }\r\n            else {\r\n                particleData.updated = false;\r\n                particleData.result.alpha = 0;\r\n            }\r\n            if (time >= particleData.delay + particleData.duration) {\r\n                if (this.loop) {\r\n                    particleData.duration = this.getDuration();\r\n                    particleData.delay = this.getDelay();\r\n                }\r\n                else {\r\n                    count++;\r\n                    particleData.duration = 0;\r\n                    particleData.result.alpha = 0;\r\n                }\r\n            }\r\n        });\r\n        this.delay = 0;\r\n        this.time += dt;\r\n        if (count >= this.particles.length) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n    reset() {\r\n        this.time = 0;\r\n        this.delay = 0;\r\n        this.particles.forEach(particleData => {\r\n            particleData.updated = false;\r\n            particleData.delay = this.getDelay(),\r\n                particleData.duration = this.getDuration();\r\n            if (particleData.result) {\r\n                particleData.result.alpha = 0;\r\n                particleData.result.x = 0;\r\n                particleData.result.y = 0;\r\n            }\r\n        });\r\n    }\r\n    onComplete() {\r\n        if (this.cb) {\r\n            this.cb();\r\n        }\r\n    }\r\n    set posStartX(value) {\r\n        this.posStart.x = value;\r\n    }\r\n    set posStartY(value) {\r\n        this.posStart.y = value;\r\n    }\r\n    set posEndX(value) {\r\n        this.posEnd.x = value;\r\n    }\r\n    set posEndY(value) {\r\n        this.posEnd.y = value;\r\n    }\r\n    setPosStart(x, y) {\r\n        this.posStart.x = x;\r\n        this.posStart.y = y;\r\n    }\r\n    setPosEnd(x, y) {\r\n        this.posEnd.x = x;\r\n        this.posEnd.y = y;\r\n    }\r\n    setData(config) {\r\n        this.correctedTintArr = null;\r\n        this.config = config;\r\n    }\r\n    getDuration() {\r\n        return this.getValue(\"duration\");\r\n    }\r\n    getDelay() {\r\n        this.delay += this.getValue(\"delay\");\r\n        return this.time + this.delay;\r\n    }\r\n    updateParticleData(particleData) {\r\n        const startX = this.posStart.x + this.getValue(\"posStartOffsetX\");\r\n        const startY = this.posStart.y + this.getValue(\"posStartOffsetY\");\r\n        const endX = this.posEnd.x + this.getValue(\"posEndOffsetX\");\r\n        const endY = this.posEnd.y + this.getValue(\"posEndOffsetY\");\r\n        particleData.posStart = { x: startX, y: startY };\r\n        particleData.posEnd = { x: endX, y: endY };\r\n        particleData.cp1 = null;\r\n        particleData.cp2 = null;\r\n        const cp1Mag = this.getValue(\"posControlPoint1Mag\");\r\n        const cp2Mag = this.getValue(\"posControlPoint2Mag\");\r\n        if (cp1Mag !== 0 || cp2Mag !== 0) {\r\n            const dx = endX - startX;\r\n            const dy = endY - startY;\r\n            const ang = Math.atan2(dx, dy);\r\n            const angle1 = ang + degreeToRadians(this.getValue(\"posControlPoint1Angle\"));\r\n            const angle2 = -(Math.PI - ang) + degreeToRadians(this.getValue(\"posControlPoint2Angle\"));\r\n            const dist = Math.sqrt(dx * dx + dy * dy);\r\n            particleData.cp1 = { x: startX + Math.sin(angle1) * dist * cp1Mag, y: startY + Math.cos(angle1) * dist * cp1Mag };\r\n            particleData.cp2 = { x: endX + Math.sin(angle2) * dist * cp2Mag, y: endY + Math.cos(angle2) * dist * cp2Mag };\r\n            if (particleData.curve) {\r\n                particleData.curve.length = 0;\r\n            }\r\n            else {\r\n                particleData.curve = [];\r\n            }\r\n        }\r\n        else {\r\n            particleData.curve = undefined;\r\n        }\r\n        particleData.alphaFrom = this.getValue(\"alphaFrom\");\r\n        particleData.alphaTo = this.getValue(\"alphaTo\");\r\n        particleData.alphaYoYo = this.getValue(\"alphaYoYo\");\r\n        if (this.config.tint) {\r\n            if (this.config.tintInterpolate && Array.isArray(this.config.tint) && this.config.tint.length > 1) {\r\n                if (!this.correctedTintArr) {\r\n                    this.correctedTintArr = getInterpolatedColors(this.config.tint, 10);\r\n                }\r\n                particleData.tint = this.correctedTintArr;\r\n            }\r\n            else {\r\n                particleData.tint = parseInt(this.getValue(\"tint\"));\r\n            }\r\n        }\r\n        particleData.scaleFrom = this.getValue(\"scaleFrom\");\r\n        particleData.scaleTo = this.getValue(\"scaleTo\");\r\n        particleData.scaleYoYo = this.getValue(\"scaleYoYo\");\r\n        particleData.rotationSpeed = degreeToRadians(this.getValue(\"rotationSpeed\"));\r\n    }\r\n    getValue(key) {\r\n        if (Array.isArray(this.config[key])) {\r\n            const arr = this.config[key];\r\n            const index = arr.length > 1 ? Math.floor(Math.random() * arr.length) : 0;\r\n            if (Array.isArray(arr[index])) {\r\n                const min = arr[index][0];\r\n                const max = arr[index][1];\r\n                return Math.random() * (max - min) + min;\r\n            }\r\n            else {\r\n                return arr[index];\r\n            }\r\n        }\r\n        else {\r\n            return this.config[key] || 0;\r\n        }\r\n    }\r\n    updateResult(particleData, t) {\r\n        const yoyoTime = t * (1 - t) * 2;\r\n        const result = particleData.result;\r\n        result.alpha = particleData.alphaFrom + (particleData.alphaTo - particleData.alphaFrom) * (particleData.alphaYoYo ? yoyoTime : t);\r\n        result.scaleX = result.scaleY = interpolate(particleData.scaleYoYo ? yoyoTime : t, particleData.scaleFrom, particleData.scaleTo);\r\n        if (particleData.curve) {\r\n            const from = Math.floor(t / this.curveSeg);\r\n            const to = from + 1;\r\n            if (particleData.curve[from] === undefined) {\r\n                particleData.curve[from] = from === 0 ? particleData.posStart : new Point();\r\n            }\r\n            if (particleData.curve[to] === undefined) {\r\n                particleData.curve[to] = to === this.curveLen - 1 ? particleData.posEnd : new Point();\r\n            }\r\n            if (from !== 0) {\r\n                getPositionOnCubicBezierCurve(from * this.curveSeg, particleData.posStart, particleData.posEnd, particleData.cp1, particleData.cp2, particleData.curve[from]);\r\n            }\r\n            if (to !== this.curveLen - 1) {\r\n                getPositionOnCubicBezierCurve(to * this.curveSeg, particleData.posStart, particleData.posEnd, particleData.cp1, particleData.cp2, particleData.curve[to]);\r\n            }\r\n            getPositionOnLine((t % this.curveSeg) / this.curveSeg, particleData.curve[from], particleData.curve[to], result);\r\n        }\r\n        else {\r\n            getPositionOnLine(t, particleData.posStart, particleData.posEnd, result);\r\n        }\r\n        if (particleData.rotationSpeed !== 0) {\r\n            result.rotation += particleData.rotationSpeed;\r\n        }\r\n        else {\r\n            result.rotation = 0;\r\n        }\r\n        if (particleData.tint) {\r\n            if (Array.isArray(particleData.tint)) {\r\n                const seg = 1 / (particleData.tint.length - 1);\r\n                result.tint = particleData.tint[Math.floor(t / seg)];\r\n            }\r\n            else {\r\n                result.tint = particleData.tint;\r\n            }\r\n        }\r\n    }\r\n    kill() {\r\n        this.particles.length = 0;\r\n        this.cb = null;\r\n    }\r\n}\r\nconst getInterpolatedColors = (hexArr, steps) => {\r\n    const arr = hexArr.map(hex => hexToHsl(parseInt(hex)));\r\n    const out = [];\r\n    const step = 1 / steps;\r\n    const seg = 1 / (arr.length - 1);\r\n    for (let i = 0; i < steps + 1; i++) {\r\n        const t = Math.min(step * i, 1);\r\n        const index = Math.min(Math.floor(t / seg), arr.length - 2);\r\n        const c1 = arr[index];\r\n        const c2 = arr[index + 1];\r\n        out.push(hslToHex(...c1.map((c, i) => shortPathInterpolate(t, c, c2[i]))));\r\n    }\r\n    return out;\r\n};\r\nexport { Particles };\r\n"],"names":["Point","[object Object]","this","x","y","Particles","totalParticles","loop","config","cb","particles","time","delay","posStart","posEnd","curveLen","curveSeg","correctedTintArr","createParticles","i","particleResult","createParticle","alpha","particleData","result","updated","getDelay","duration","getDuration","push","scaleX","scaleY","rotation","tint","dt","count","forEach","t","updateParticleData","updateResult","length","onComplete","posStartX","value","posStartY","posEndX","posEndY","getValue","startX","startY","endX","endY","cp1","cp2","cp1Mag","cp2Mag","dx","dy","ang","Math","atan2","angle1","degreeToRadians","angle2","PI","dist","sqrt","sin","cos","curve","undefined","alphaFrom","alphaTo","alphaYoYo","tintInterpolate","Array","isArray","getInterpolatedColors","parseInt","scaleFrom","scaleTo","scaleYoYo","rotationSpeed","key","arr","index","floor","random","min","max","yoyoTime","interpolate","from","to","getPositionOnCubicBezierCurve","getPositionOnLine","seg","hexArr","steps","map","hex","hexToHsl","out","step","c1","c2","hslToHex","c","shortPathInterpolate"],"mappings":"+KACA,MAAMA,EACFC,cACIC,KAAKC,EAAI,EACTD,KAAKE,EAAI,GAIjB,MAAMC,EACFJ,YAAYK,EAAgBC,EAAMC,EAAQC,GACtCP,KAAKI,eAAiBA,EACtBJ,KAAKK,KAAOA,EACZL,KAAKM,OAASA,EACdN,KAAKO,GAAKA,EACVP,KAAKQ,UAAY,GACjBR,KAAKS,KAAO,EACZT,KAAKU,MAAQ,EACbV,KAAKW,SAAW,CAAEV,EAAG,EAAGC,EAAG,GAC3BF,KAAKY,OAAS,CAAEX,EAAG,EAAGC,EAAG,GACzBF,KAAKa,SAAW,GAChBb,KAAKc,SAAW,GAAKd,KAAKa,SAAW,GACrCb,KAAKe,iBAAmB,KACxBf,KAAKgB,gBAAgBZ,GAEzBL,gBAAgBK,GACZ,IAAK,IAAIa,EAAI,EAAGA,EAAIb,EAAgBa,IAAK,CACrC,MAAMC,EAAiBlB,KAAKmB,iBAC5BD,EAAeE,MAAQ,EACvB,MAAMC,EAAe,CACjBC,OAAQJ,EACRK,SAAS,EACTb,MAAOV,KAAKwB,WACZC,SAAUzB,KAAK0B,eAEnB1B,KAAKQ,UAAUmB,KAAKN,IAG5BtB,iBACI,MAAO,CAAEE,EAAG,EAAGC,EAAG,EAAGkB,MAAO,EAAGQ,OAAQ,EAAGC,OAAQ,EAAGC,SAAU,EAAGC,KAAM,UAE5EhC,OAAOiC,GACH,MAAMvB,EAAOT,KAAKS,KAClB,IAAIwB,EAAQ,EACZjC,KAAKQ,UAAU0B,SAAQb,IACnB,GAA8B,IAA1BA,EAAaI,SAEb,YADAQ,IAGJ,MAAME,GAAK1B,EAAOY,EAAaX,OAASW,EAAaI,SACjDU,GAAK,GAAKA,GAAK,GACfd,EAAaC,OAAOF,MAAQ,EACvBC,EAAaE,UACdF,EAAaE,SAAU,EACvBvB,KAAKoC,mBAAmBf,IAE5BrB,KAAKqC,aAAahB,EAAcc,KAGhCd,EAAaE,SAAU,EACvBF,EAAaC,OAAOF,MAAQ,GAE5BX,GAAQY,EAAaX,MAAQW,EAAaI,WACtCzB,KAAKK,MACLgB,EAAaI,SAAWzB,KAAK0B,cAC7BL,EAAaX,MAAQV,KAAKwB,aAG1BS,IACAZ,EAAaI,SAAW,EACxBJ,EAAaC,OAAOF,MAAQ,OAIxCpB,KAAKU,MAAQ,EACbV,KAAKS,MAAQuB,EACTC,GAASjC,KAAKQ,UAAU8B,QACxBtC,KAAKuC,aAGbxC,QACIC,KAAKS,KAAO,EACZT,KAAKU,MAAQ,EACbV,KAAKQ,UAAU0B,SAAQb,IACnBA,EAAaE,SAAU,EACvBF,EAAaX,MAAQV,KAAKwB,WACtBH,EAAaI,SAAWzB,KAAK0B,cAC7BL,EAAaC,SACbD,EAAaC,OAAOF,MAAQ,EAC5BC,EAAaC,OAAOrB,EAAI,EACxBoB,EAAaC,OAAOpB,EAAI,MAIpCH,aACQC,KAAKO,IACLP,KAAKO,KAGbiC,cAAcC,GACVzC,KAAKW,SAASV,EAAIwC,EAEtBC,cAAcD,GACVzC,KAAKW,SAAST,EAAIuC,EAEtBE,YAAYF,GACRzC,KAAKY,OAAOX,EAAIwC,EAEpBG,YAAYH,GACRzC,KAAKY,OAAOV,EAAIuC,EAEpB1C,YAAYE,EAAGC,GACXF,KAAKW,SAASV,EAAIA,EAClBD,KAAKW,SAAST,EAAIA,EAEtBH,UAAUE,EAAGC,GACTF,KAAKY,OAAOX,EAAIA,EAChBD,KAAKY,OAAOV,EAAIA,EAEpBH,QAAQO,GACJN,KAAKe,iBAAmB,KACxBf,KAAKM,OAASA,EAElBP,cACI,OAAOC,KAAK6C,SAAS,YAEzB9C,WAEI,OADAC,KAAKU,OAASV,KAAK6C,SAAS,SACrB7C,KAAKS,KAAOT,KAAKU,MAE5BX,mBAAmBsB,GACf,MAAMyB,EAAS9C,KAAKW,SAASV,EAAID,KAAK6C,SAAS,mBACzCE,EAAS/C,KAAKW,SAAST,EAAIF,KAAK6C,SAAS,mBACzCG,EAAOhD,KAAKY,OAAOX,EAAID,KAAK6C,SAAS,iBACrCI,EAAOjD,KAAKY,OAAOV,EAAIF,KAAK6C,SAAS,iBAC3CxB,EAAaV,SAAW,CAAEV,EAAG6C,EAAQ5C,EAAG6C,GACxC1B,EAAaT,OAAS,CAAEX,EAAG+C,EAAM9C,EAAG+C,GACpC5B,EAAa6B,IAAM,KACnB7B,EAAa8B,IAAM,KACnB,MAAMC,EAASpD,KAAK6C,SAAS,uBACvBQ,EAASrD,KAAK6C,SAAS,uBAC7B,GAAe,IAAXO,GAA2B,IAAXC,EAAc,CAC9B,MAAMC,EAAKN,EAAOF,EACZS,EAAKN,EAAOF,EACZS,EAAMC,KAAKC,MAAMJ,EAAIC,GACrBI,EAASH,EAAMI,EAAgB5D,KAAK6C,SAAS,0BAC7CgB,IAAWJ,KAAKK,GAAKN,GAAOI,EAAgB5D,KAAK6C,SAAS,0BAC1DkB,EAAON,KAAKO,KAAKV,EAAKA,EAAKC,EAAKA,GACtClC,EAAa6B,IAAM,CAAEjD,EAAG6C,EAASW,KAAKQ,IAAIN,GAAUI,EAAOX,EAAQlD,EAAG6C,EAASU,KAAKS,IAAIP,GAAUI,EAAOX,GACzG/B,EAAa8B,IAAM,CAAElD,EAAG+C,EAAOS,KAAKQ,IAAIJ,GAAUE,EAAOV,EAAQnD,EAAG+C,EAAOQ,KAAKS,IAAIL,GAAUE,EAAOV,GACjGhC,EAAa8C,MACb9C,EAAa8C,MAAM7B,OAAS,EAG5BjB,EAAa8C,MAAQ,QAIzB9C,EAAa8C,WAAQC,EAEzB/C,EAAagD,UAAYrE,KAAK6C,SAAS,aACvCxB,EAAaiD,QAAUtE,KAAK6C,SAAS,WACrCxB,EAAakD,UAAYvE,KAAK6C,SAAS,aACnC7C,KAAKM,OAAOyB,OACR/B,KAAKM,OAAOkE,iBAAmBC,MAAMC,QAAQ1E,KAAKM,OAAOyB,OAAS/B,KAAKM,OAAOyB,KAAKO,OAAS,GACvFtC,KAAKe,mBACNf,KAAKe,iBAAmB4D,EAAsB3E,KAAKM,OAAOyB,KAAM,KAEpEV,EAAaU,KAAO/B,KAAKe,kBAGzBM,EAAaU,KAAO6C,SAAS5E,KAAK6C,SAAS,UAGnDxB,EAAawD,UAAY7E,KAAK6C,SAAS,aACvCxB,EAAayD,QAAU9E,KAAK6C,SAAS,WACrCxB,EAAa0D,UAAY/E,KAAK6C,SAAS,aACvCxB,EAAa2D,cAAgBpB,EAAgB5D,KAAK6C,SAAS,kBAE/D9C,SAASkF,GACL,GAAIR,MAAMC,QAAQ1E,KAAKM,OAAO2E,IAAO,CACjC,MAAMC,EAAMlF,KAAKM,OAAO2E,GAClBE,EAAQD,EAAI5C,OAAS,EAAImB,KAAK2B,MAAM3B,KAAK4B,SAAWH,EAAI5C,QAAU,EACxE,GAAImC,MAAMC,QAAQQ,EAAIC,IAAS,CAC3B,MAAMG,EAAMJ,EAAIC,GAAO,GACjBI,EAAML,EAAIC,GAAO,GACvB,OAAO1B,KAAK4B,UAAYE,EAAMD,GAAOA,EAGrC,OAAOJ,EAAIC,GAIf,OAAOnF,KAAKM,OAAO2E,IAAQ,EAGnClF,aAAasB,EAAcc,GACvB,MAAMqD,EAAWrD,GAAK,EAAIA,GAAK,EACzBb,EAASD,EAAaC,OAG5B,GAFAA,EAAOF,MAAQC,EAAagD,WAAahD,EAAaiD,QAAUjD,EAAagD,YAAchD,EAAakD,UAAYiB,EAAWrD,GAC/Hb,EAAOM,OAASN,EAAOO,OAAS4D,EAAYpE,EAAa0D,UAAYS,EAAWrD,EAAGd,EAAawD,UAAWxD,EAAayD,SACpHzD,EAAa8C,MAAO,CACpB,MAAMuB,EAAOjC,KAAK2B,MAAMjD,EAAInC,KAAKc,UAC3B6E,EAAKD,EAAO,OACetB,IAA7B/C,EAAa8C,MAAMuB,KACnBrE,EAAa8C,MAAMuB,GAAiB,IAATA,EAAarE,EAAaV,SAAW,IAAIb,QAEzCsE,IAA3B/C,EAAa8C,MAAMwB,KACnBtE,EAAa8C,MAAMwB,GAAMA,IAAO3F,KAAKa,SAAW,EAAIQ,EAAaT,OAAS,IAAId,GAErE,IAAT4F,GACAE,EAA8BF,EAAO1F,KAAKc,SAAUO,EAAaV,SAAUU,EAAaT,OAAQS,EAAa6B,IAAK7B,EAAa8B,IAAK9B,EAAa8C,MAAMuB,IAEvJC,IAAO3F,KAAKa,SAAW,GACvB+E,EAA8BD,EAAK3F,KAAKc,SAAUO,EAAaV,SAAUU,EAAaT,OAAQS,EAAa6B,IAAK7B,EAAa8B,IAAK9B,EAAa8C,MAAMwB,IAEzJE,EAAmB1D,EAAInC,KAAKc,SAAYd,KAAKc,SAAUO,EAAa8C,MAAMuB,GAAOrE,EAAa8C,MAAMwB,GAAKrE,QAGzGuE,EAAkB1D,EAAGd,EAAaV,SAAUU,EAAaT,OAAQU,GAQrE,GANmC,IAA/BD,EAAa2D,cACb1D,EAAOQ,UAAYT,EAAa2D,cAGhC1D,EAAOQ,SAAW,EAElBT,EAAaU,KACb,GAAI0C,MAAMC,QAAQrD,EAAaU,MAAO,CAClC,MAAM+D,EAAM,GAAKzE,EAAaU,KAAKO,OAAS,GAC5ChB,EAAOS,KAAOV,EAAaU,KAAK0B,KAAK2B,MAAMjD,EAAI2D,SAG/CxE,EAAOS,KAAOV,EAAaU,KAIvChC,OACIC,KAAKQ,UAAU8B,OAAS,EACxBtC,KAAKO,GAAK,MAGlB,MAAMoE,EAAwB,CAACoB,EAAQC,KACnC,MAAMd,EAAMa,EAAOE,KAAIC,GAAOC,EAASvB,SAASsB,MAC1CE,EAAM,GACNC,EAAO,EAAIL,EACXF,EAAM,GAAKZ,EAAI5C,OAAS,GAC9B,IAAK,IAAIrB,EAAI,EAAGA,EAAI+E,EAAQ,EAAG/E,IAAK,CAChC,MAAMkB,EAAIsB,KAAK6B,IAAIe,EAAOpF,EAAG,GACvBkE,EAAQ1B,KAAK6B,IAAI7B,KAAK2B,MAAMjD,EAAI2D,GAAMZ,EAAI5C,OAAS,GACnDgE,EAAKpB,EAAIC,GACToB,EAAKrB,EAAIC,EAAQ,GACvBiB,EAAIzE,KAAK6E,KAAYF,EAAGL,KAAI,CAACQ,EAAGxF,IAAMyF,EAAqBvE,EAAGsE,EAAGF,EAAGtF,QAExE,OAAOmF"}