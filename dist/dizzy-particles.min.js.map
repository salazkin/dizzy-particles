{"version":3,"file":"dizzy-particles.min.js","sources":["../src/index.js"],"sourcesContent":["class Point {\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n    }\r\n}\r\n;\r\nclass Particle {\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.alpha = 1;\r\n        this.scaleX = 0;\r\n        this.scaleY = 0;\r\n        this.rotation = 0;\r\n        this.tint = \"0xff0000\";\r\n    }\r\n}\r\nclass Particles {\r\n    constructor(totalParticles, loop, config, cb) {\r\n        this.totalParticles = totalParticles;\r\n        this.loop = loop;\r\n        this.config = config;\r\n        this.cb = cb;\r\n        this.particles = [];\r\n        this.particleDataArr = [];\r\n        this.time = 0;\r\n        this.delay = 0;\r\n        this.posStart = { x: 0, y: 0 };\r\n        this.posEnd = { x: 0, y: 0 };\r\n        this.curveLen = 20;\r\n        this.curveSeg = 1 / (this.curveLen - 1);\r\n        this.correctedTintArr = null;\r\n        this.createParticles(totalParticles);\r\n    }\r\n    createParticles(totalParticles) {\r\n        for (let i = 0; i < totalParticles; i++) {\r\n            const particle = new Particle();\r\n            particle.alpha = 0;\r\n            this.particles[i] = particle;\r\n            this.particleDataArr.push({\r\n                particle: this.particles[i],\r\n                configUpdated: false,\r\n                delay: this.getDelay(),\r\n                duration: this.getDuration(),\r\n                config: {}\r\n            });\r\n        }\r\n    }\r\n    update(dt) {\r\n        const time = this.time;\r\n        let count = 0;\r\n        this.particleDataArr.forEach(item => {\r\n            if (item.duration === 0) {\r\n                count++;\r\n                return;\r\n            }\r\n            const t = (time - item.delay) / item.duration;\r\n            if (t >= 0 && t <= 1) {\r\n                item.particle.alpha = 1;\r\n                if (!item.configUpdated) {\r\n                    item.configUpdated = true;\r\n                    this.updateConfig(item.config);\r\n                }\r\n                this.onUpdateParticle(item.particle, item.config, t);\r\n            }\r\n            else {\r\n                item.configUpdated = false;\r\n                item.particle.alpha = 0;\r\n            }\r\n            if (time >= item.delay + item.duration) {\r\n                if (this.loop) {\r\n                    item.duration = this.getDuration();\r\n                    item.delay = this.getDelay();\r\n                }\r\n                else {\r\n                    count++;\r\n                    item.duration = 0;\r\n                    item.particle.alpha = 0;\r\n                }\r\n            }\r\n        });\r\n        this.delay = 0;\r\n        this.time += dt;\r\n        if (count >= this.particleDataArr.length) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n    reset() {\r\n        this.time = 0;\r\n        this.delay = 0;\r\n        this.particleDataArr.forEach(particleData => {\r\n            particleData.configUpdated = false;\r\n            particleData.delay = this.getDelay(),\r\n                particleData.duration = this.getDuration();\r\n            if (particleData.particle) {\r\n                particleData.particle.alpha = 0;\r\n                particleData.particle.x = 0;\r\n                particleData.particle.y = 0;\r\n            }\r\n        });\r\n    }\r\n    onComplete() {\r\n        if (this.cb) {\r\n            this.cb();\r\n        }\r\n    }\r\n    set posStartX(value) {\r\n        this.posStart.x = value;\r\n    }\r\n    set posStartY(value) {\r\n        this.posStart.y = value;\r\n    }\r\n    set posEndX(value) {\r\n        this.posEnd.x = value;\r\n    }\r\n    set posEndY(value) {\r\n        this.posEnd.y = value;\r\n    }\r\n    setPosStart(x, y) {\r\n        this.posStart.x = x;\r\n        this.posStart.y = y;\r\n    }\r\n    setPosEnd(x, y) {\r\n        this.posEnd.x = x;\r\n        this.posEnd.y = y;\r\n    }\r\n    setData(config) {\r\n        this.correctedTintArr = null;\r\n        this.config = config;\r\n    }\r\n    getDuration() {\r\n        return this.getValue(\"duration\");\r\n    }\r\n    getDelay() {\r\n        this.delay += this.getValue(\"delay\");\r\n        return this.time + this.delay;\r\n    }\r\n    updateConfig(target) {\r\n        const startX = this.posStart.x + this.getValue(\"posStartOffsetX\");\r\n        const startY = this.posStart.y + this.getValue(\"posStartOffsetY\");\r\n        const endX = this.posEnd.x + this.getValue(\"posEndOffsetX\");\r\n        const endY = this.posEnd.y + this.getValue(\"posEndOffsetY\");\r\n        target.posStart = { x: startX, y: startY };\r\n        target.posEnd = { x: endX, y: endY };\r\n        target.cp1 = null;\r\n        target.cp2 = null;\r\n        const cp1Mag = this.getValue(\"posControlPoint1Mag\");\r\n        const cp2Mag = this.getValue(\"posControlPoint2Mag\");\r\n        if (cp1Mag !== 0 || cp2Mag !== 0) {\r\n            let dx = endX - startX;\r\n            let dy = endY - startY;\r\n            let ang = Math.atan2(dx, dy);\r\n            let angle1 = ang + degreeToRadians(this.getValue(\"posControlPoint1Angle\"));\r\n            let angle2 = -(Math.PI - ang) + degreeToRadians(this.getValue(\"posControlPoint2Angle\"));\r\n            let dist = Math.sqrt(dx * dx + dy * dy);\r\n            target.cp1 = { x: startX + Math.sin(angle1) * dist * cp1Mag, y: startY + Math.cos(angle1) * dist * cp1Mag };\r\n            target.cp2 = { x: endX + Math.sin(angle2) * dist * cp2Mag, y: endY + Math.cos(angle2) * dist * cp2Mag };\r\n            if (target.curve) {\r\n                target.curve.length = 0;\r\n            }\r\n            else {\r\n                target.curve = [];\r\n            }\r\n        }\r\n        target.alphaFrom = this.getValue(\"alphaFrom\");\r\n        target.alphaTo = this.getValue(\"alphaTo\");\r\n        target.alphaYoYo = this.getValue(\"alphaYoYo\");\r\n        if (this.config.tint) {\r\n            if (this.config.tintInterpolate && Array.isArray(this.config.tint) && this.config.tint.length > 1) {\r\n                if (!this.correctedTintArr) {\r\n                    this.correctedTintArr = getInterpolatedColors(this.config.tint, 5);\r\n                }\r\n                target.tint = this.correctedTintArr;\r\n            }\r\n            else {\r\n                target.tint = this.getValue(\"tint\");\r\n            }\r\n        }\r\n        target.scaleFrom = this.getValue(\"scaleFrom\");\r\n        target.scaleTo = this.getValue(\"scaleTo\");\r\n        target.scaleYoYo = this.getValue(\"scaleYoYo\");\r\n        target.rotationSpeed = degreeToRadians(this.getValue(\"rotationSpeed\"));\r\n    }\r\n    getValue(key) {\r\n        if (Array.isArray(this.config[key])) {\r\n            const arr = this.config[key];\r\n            const index = arr.length > 1 ? Math.floor(Math.random() * arr.length) : 0;\r\n            if (Array.isArray(arr[index])) {\r\n                const min = arr[index][0];\r\n                const max = arr[index][1];\r\n                return Math.random() * (max - min) + min;\r\n            }\r\n            else {\r\n                return arr[index];\r\n            }\r\n        }\r\n        else {\r\n            return this.config[key] || 0;\r\n        }\r\n    }\r\n    onUpdateParticle(particle, config, t) {\r\n        const yoyoTime = t * (1 - t) * 2;\r\n        particle.alpha = config.alphaFrom + (config.alphaTo - config.alphaFrom) * (config.alphaYoYo ? yoyoTime : t);\r\n        particle.scaleX = particle.scaleY = interpolate(config.scaleYoYo ? yoyoTime : t, config.scaleFrom, config.scaleTo);\r\n        if (config.curve) {\r\n            const from = Math.floor(t / this.curveSeg);\r\n            const to = from + 1;\r\n            if (config.curve[from] === undefined) {\r\n                config.curve[from] = from === 0 ? config.posStart : new Point();\r\n            }\r\n            if (config.curve[to] === undefined) {\r\n                config.curve[to] = to === this.curveLen - 1 ? config.posEnd : new Point();\r\n            }\r\n            if (from !== 0) {\r\n                setPositionOnCurve(config.curve[from], from * this.curveSeg, config.posStart, config.posEnd, config.cp1, config.cp2);\r\n            }\r\n            if (to !== this.curveLen - 1) {\r\n                setPositionOnCurve(config.curve[to], to * this.curveSeg, config.posStart, config.posEnd, config.cp1, config.cp2);\r\n            }\r\n            setPositionOnLine(particle, (t % this.curveSeg) / this.curveSeg, config.curve[from], config.curve[to]);\r\n        }\r\n        else {\r\n            setPositionOnLine(particle, t, config.posStart, config.posEnd);\r\n        }\r\n        if (config.rotationSpeed !== 0) {\r\n            particle.rotation += config.rotationSpeed;\r\n        }\r\n        else {\r\n            particle.rotation = 0;\r\n        }\r\n        if (config.tint) {\r\n            if (Array.isArray(config.tint)) {\r\n                const seg = 1 / (config.tint.length - 1);\r\n                particle.tint = config.tint[Math.floor(t / seg)];\r\n            }\r\n            else {\r\n                particle.tint = config.tint;\r\n            }\r\n        }\r\n    }\r\n    kill() {\r\n        this.particleDataArr.length = 0;\r\n        this.cb = null;\r\n    }\r\n}\r\nconst getRotationOnCurve = (t, p1, p2, cp1, cp2) => {\r\n    const t2 = t * t;\r\n    const dx = 3 * Math.pow(1 - t, 2) * (cp1.x - p1.x) + 6 * (1 - t) * t * (cp2.x - cp1.x) + 3 * t2 * (p1.y - cp2.x);\r\n    const dy = 3 * Math.pow(1 - t, 2) * (cp1.y - p1.y) + 6 * (1 - t) * t * (cp2.y - cp1.y) + 3 * t2 * (p2.y - cp2.y);\r\n    return Math.atan2(dx, dy);\r\n};\r\nconst hexToRgb = (color) => {\r\n    const arr = [];\r\n    for (let i = 2; i >= 0; i--) {\r\n        const c = color.substring(color.length - i * 2 - 2, color.length - i * 2);\r\n        arr.push(parseInt(c, 16));\r\n    }\r\n    return arr;\r\n};\r\nconst rgbToHex = (arr, prefix) => {\r\n    return prefix + arr.map(v => hexValue(v)).join(\"\");\r\n};\r\nconst getInterpolatedColors = (hexArr, steps) => {\r\n    const arr = hexArr.map(hex => hexToHsl(hex));\r\n    const out = [];\r\n    const step = 1 / steps;\r\n    for (let i = 0; i < steps + 1; i++) {\r\n        const t = Math.min(step * i, 1);\r\n        const seg = 1 / (arr.length - 1);\r\n        const index = Math.min(Math.floor(t / seg), arr.length - 2);\r\n        const c1 = arr[index];\r\n        const c2 = arr[index + 1];\r\n        out.push(hslToHex(c1.map((c, i) => interpolate(t, c, c2[i], i === 0))));\r\n    }\r\n    return out;\r\n};\r\nconst interpolate = (t, v1, v2, minDist) => {\r\n    if (!minDist) {\r\n        return v1 + (v2 - v1) * t;\r\n    }\r\n    const a = Math.min(v1, v2);\r\n    const b = Math.max(v1, v2);\r\n    const dist1 = b - a;\r\n    const dist2 = 1 - b + a;\r\n    if (dist1 < dist2) {\r\n        return a + dist1 * t;\r\n    }\r\n    else {\r\n        return (b + dist2 * t) % 1;\r\n    }\r\n};\r\nconst hexToHsl = (hex) => {\r\n    const r = parseInt(hex.substring(hex.length - 6, hex.length - 4), 16) / 255;\r\n    const g = parseInt(hex.substring(hex.length - 4, hex.length - 2), 16) / 255;\r\n    const b = parseInt(hex.substring(hex.length - 2, hex.length), 16) / 255;\r\n    const max = Math.max(r, g, b);\r\n    const min = Math.min(r, g, b);\r\n    let l = (max + min) / 2;\r\n    let s = 0;\r\n    let h = 0;\r\n    if (max !== min) {\r\n        const d = max - min;\r\n        s = l < 0.5 ? d / (max + min) : d / (2 - max - min);\r\n        if (r == max) {\r\n            h = (g - b) / d + (g < b ? 6 : 0);\r\n        }\r\n        else if (g == max) {\r\n            h = 2 + (b - r) / d;\r\n        }\r\n        else {\r\n            h = 4 + (r - g) / d;\r\n        }\r\n    }\r\n    h /= 6;\r\n    return [h, s, l];\r\n};\r\nconst hslToHex = (arr) => {\r\n    let h = arr[0];\r\n    let s = arr[1];\r\n    let l = arr[2];\r\n    let r, g, b;\r\n    if (s == 0) {\r\n        r = g = b = l;\r\n    }\r\n    else {\r\n        let q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n        let p = 2 * l - q;\r\n        r = Math.round(hueToRgb(h + 1 / 3, p, q) * 255);\r\n        g = Math.round(hueToRgb(h, p, q) * 255);\r\n        b = Math.round(hueToRgb(h - 1 / 3, p, q) * 255);\r\n    }\r\n    return \"0x\" + hexValue(r) + hexValue(g) + hexValue(b);\r\n};\r\nconst hueToRgb = (t, p, q) => {\r\n    if (t < 0) {\r\n        t += 1;\r\n    }\r\n    if (t > 1) {\r\n        t -= 1;\r\n    }\r\n    if (t < 1 / 6) {\r\n        return p + (q - p) * 6 * t;\r\n    }\r\n    if (t < 1 / 2) {\r\n        return q;\r\n    }\r\n    if (t < 2 / 3) {\r\n        return p + (q - p) * (2 / 3 - t) * 6;\r\n    }\r\n    return p;\r\n};\r\nconst hexValue = (v) => {\r\n    return (\"0\" + v.toString(16)).slice(-2);\r\n};\r\nconst degreeToRadians = (degrees) => {\r\n    return degrees * Math.PI / 180;\r\n};\r\nconst radiansToDegree = (radians) => {\r\n    return radians * 180 / Math.PI;\r\n};\r\nconst setPositionOnLine = (target, t, p0, p1) => {\r\n    target.x = p0.x + (p1.x - p0.x) * t;\r\n    target.y = p0.y + (p1.y - p0.y) * t;\r\n};\r\nconst setPositionOnCurve = (target, t, p1, p2, cp1, cp2) => {\r\n    const t2 = t * t;\r\n    const t3 = t * t * t;\r\n    target.x = Math.pow(1 - t, 3) * p1.x + 3 * Math.pow(1 - t, 2) * t * cp1.x + 3 * (1 - t) * t2 * cp2.x + t3 * p2.x;\r\n    target.y = Math.pow(1 - t, 3) * p1.y + 3 * Math.pow(1 - t, 2) * t * cp1.y + 3 * (1 - t) * t2 * cp2.y + t3 * p2.y;\r\n};\r\nexport { Particles };\r\n"],"names":["Point","[object Object]","this","x","y","Particle","alpha","scaleX","scaleY","rotation","tint","Particles","totalParticles","loop","config","cb","particles","particleDataArr","time","delay","posStart","posEnd","curveLen","curveSeg","correctedTintArr","createParticles","i","particle","push","configUpdated","getDelay","duration","getDuration","dt","count","forEach","item","t","updateConfig","onUpdateParticle","length","onComplete","particleData","posStartX","value","posStartY","posEndX","posEndY","getValue","target","startX","startY","endX","endY","cp1","cp2","cp1Mag","cp2Mag","dx","dy","ang","Math","atan2","angle1","degreeToRadians","angle2","PI","dist","sqrt","sin","cos","curve","alphaFrom","alphaTo","alphaYoYo","tintInterpolate","Array","isArray","getInterpolatedColors","scaleFrom","scaleTo","scaleYoYo","rotationSpeed","key","arr","index","floor","random","min","max","yoyoTime","interpolate","from","to","undefined","setPositionOnCurve","setPositionOnLine","seg","hexArr","steps","map","hex","hexToHsl","out","step","c1","c2","hslToHex","c","v1","v2","minDist","a","b","dist1","dist2","r","parseInt","substring","g","l","s","h","d","q","p","round","hueToRgb","hexValue","v","toString","slice","degrees","p0","p1","p2","t2","t3","pow"],"mappings":"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"}