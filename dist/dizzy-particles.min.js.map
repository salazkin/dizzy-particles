{"version":3,"file":"dizzy-particles.min.js","sources":["../src/index.js"],"sourcesContent":["class Point {\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n    }\r\n}\r\n;\r\nclass Particles {\r\n    constructor(totalParticles, loop, config, cb) {\r\n        this.totalParticles = totalParticles;\r\n        this.loop = loop;\r\n        this.config = config;\r\n        this.cb = cb;\r\n        this.particles = [];\r\n        this.time = 0;\r\n        this.delay = 0;\r\n        this.posStart = { x: 0, y: 0 };\r\n        this.posEnd = { x: 0, y: 0 };\r\n        this.curveLen = 20;\r\n        this.curveSeg = 1 / (this.curveLen - 1);\r\n        this.correctedTintArr = null;\r\n        this.createParticles(totalParticles);\r\n    }\r\n    createParticles(totalParticles) {\r\n        for (let i = 0; i < totalParticles; i++) {\r\n            const particleResult = this.createParticle();\r\n            particleResult.alpha = 0;\r\n            const particleData = {\r\n                result: particleResult,\r\n                updated: false,\r\n                delay: this.getDelay(),\r\n                duration: this.getDuration(),\r\n            };\r\n            this.particles.push(particleData);\r\n        }\r\n    }\r\n    createParticle() {\r\n        return { x: 0, y: 0, alpha: 1, scaleX: 1, scaleY: 1, rotation: 0, tint: \"0xffffff\" };\r\n    }\r\n    update(dt) {\r\n        const time = this.time;\r\n        let count = 0;\r\n        this.particles.forEach(particleData => {\r\n            if (particleData.duration === 0) {\r\n                count++;\r\n                return;\r\n            }\r\n            const t = (time - particleData.delay) / particleData.duration;\r\n            if (t >= 0 && t <= 1) {\r\n                particleData.result.alpha = 1;\r\n                if (!particleData.updated) {\r\n                    particleData.updated = true;\r\n                    this.updateParticleData(particleData);\r\n                }\r\n                this.updateResult(particleData, t);\r\n            }\r\n            else {\r\n                particleData.updated = false;\r\n                particleData.result.alpha = 0;\r\n            }\r\n            if (time >= particleData.delay + particleData.duration) {\r\n                if (this.loop) {\r\n                    particleData.duration = this.getDuration();\r\n                    particleData.delay = this.getDelay();\r\n                }\r\n                else {\r\n                    count++;\r\n                    particleData.duration = 0;\r\n                    particleData.result.alpha = 0;\r\n                }\r\n            }\r\n        });\r\n        this.delay = 0;\r\n        this.time += dt;\r\n        if (count >= this.particles.length) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n    reset() {\r\n        this.time = 0;\r\n        this.delay = 0;\r\n        this.particles.forEach(particleData => {\r\n            particleData.updated = false;\r\n            particleData.delay = this.getDelay(),\r\n                particleData.duration = this.getDuration();\r\n            if (particleData.result) {\r\n                particleData.result.alpha = 0;\r\n                particleData.result.x = 0;\r\n                particleData.result.y = 0;\r\n            }\r\n        });\r\n    }\r\n    onComplete() {\r\n        if (this.cb) {\r\n            this.cb();\r\n        }\r\n    }\r\n    set posStartX(value) {\r\n        this.posStart.x = value;\r\n    }\r\n    set posStartY(value) {\r\n        this.posStart.y = value;\r\n    }\r\n    set posEndX(value) {\r\n        this.posEnd.x = value;\r\n    }\r\n    set posEndY(value) {\r\n        this.posEnd.y = value;\r\n    }\r\n    setPosStart(x, y) {\r\n        this.posStart.x = x;\r\n        this.posStart.y = y;\r\n    }\r\n    setPosEnd(x, y) {\r\n        this.posEnd.x = x;\r\n        this.posEnd.y = y;\r\n    }\r\n    setData(config) {\r\n        this.correctedTintArr = null;\r\n        this.config = config;\r\n    }\r\n    getDuration() {\r\n        return this.getValue(\"duration\");\r\n    }\r\n    getDelay() {\r\n        this.delay += this.getValue(\"delay\");\r\n        return this.time + this.delay;\r\n    }\r\n    updateParticleData(particleData) {\r\n        const startX = this.posStart.x + this.getValue(\"posStartOffsetX\");\r\n        const startY = this.posStart.y + this.getValue(\"posStartOffsetY\");\r\n        const endX = this.posEnd.x + this.getValue(\"posEndOffsetX\");\r\n        const endY = this.posEnd.y + this.getValue(\"posEndOffsetY\");\r\n        particleData.posStart = { x: startX, y: startY };\r\n        particleData.posEnd = { x: endX, y: endY };\r\n        particleData.cp1 = null;\r\n        particleData.cp2 = null;\r\n        const cp1Mag = this.getValue(\"posControlPoint1Mag\");\r\n        const cp2Mag = this.getValue(\"posControlPoint2Mag\");\r\n        if (cp1Mag !== 0 || cp2Mag !== 0) {\r\n            let dx = endX - startX;\r\n            let dy = endY - startY;\r\n            let ang = Math.atan2(dx, dy);\r\n            let angle1 = ang + degreeToRadians(this.getValue(\"posControlPoint1Angle\"));\r\n            let angle2 = -(Math.PI - ang) + degreeToRadians(this.getValue(\"posControlPoint2Angle\"));\r\n            let dist = Math.sqrt(dx * dx + dy * dy);\r\n            particleData.cp1 = { x: startX + Math.sin(angle1) * dist * cp1Mag, y: startY + Math.cos(angle1) * dist * cp1Mag };\r\n            particleData.cp2 = { x: endX + Math.sin(angle2) * dist * cp2Mag, y: endY + Math.cos(angle2) * dist * cp2Mag };\r\n            if (particleData.curve) {\r\n                particleData.curve.length = 0;\r\n            }\r\n            else {\r\n                particleData.curve = [];\r\n            }\r\n        }\r\n        particleData.alphaFrom = this.getValue(\"alphaFrom\");\r\n        particleData.alphaTo = this.getValue(\"alphaTo\");\r\n        particleData.alphaYoYo = this.getValue(\"alphaYoYo\");\r\n        if (this.config.tint) {\r\n            if (this.config.tintInterpolate && Array.isArray(this.config.tint) && this.config.tint.length > 1) {\r\n                if (!this.correctedTintArr) {\r\n                    this.correctedTintArr = getInterpolatedColors(this.config.tint, 5);\r\n                }\r\n                particleData.tint = this.correctedTintArr;\r\n            }\r\n            else {\r\n                particleData.tint = this.getValue(\"tint\");\r\n            }\r\n        }\r\n        particleData.scaleFrom = this.getValue(\"scaleFrom\");\r\n        particleData.scaleTo = this.getValue(\"scaleTo\");\r\n        particleData.scaleYoYo = this.getValue(\"scaleYoYo\");\r\n        particleData.rotationSpeed = degreeToRadians(this.getValue(\"rotationSpeed\"));\r\n    }\r\n    getValue(key) {\r\n        if (Array.isArray(this.config[key])) {\r\n            const arr = this.config[key];\r\n            const index = arr.length > 1 ? Math.floor(Math.random() * arr.length) : 0;\r\n            if (Array.isArray(arr[index])) {\r\n                const min = arr[index][0];\r\n                const max = arr[index][1];\r\n                return Math.random() * (max - min) + min;\r\n            }\r\n            else {\r\n                return arr[index];\r\n            }\r\n        }\r\n        else {\r\n            return this.config[key] || 0;\r\n        }\r\n    }\r\n    updateResult(particleData, t) {\r\n        const yoyoTime = t * (1 - t) * 2;\r\n        const result = particleData.result;\r\n        result.alpha = particleData.alphaFrom + (particleData.alphaTo - particleData.alphaFrom) * (particleData.alphaYoYo ? yoyoTime : t);\r\n        result.scaleX = result.scaleY = interpolate(particleData.scaleYoYo ? yoyoTime : t, particleData.scaleFrom, particleData.scaleTo);\r\n        if (particleData.curve) {\r\n            const from = Math.floor(t / this.curveSeg);\r\n            const to = from + 1;\r\n            if (particleData.curve[from] === undefined) {\r\n                particleData.curve[from] = from === 0 ? particleData.posStart : new Point();\r\n            }\r\n            if (particleData.curve[to] === undefined) {\r\n                particleData.curve[to] = to === this.curveLen - 1 ? particleData.posEnd : new Point();\r\n            }\r\n            if (from !== 0) {\r\n                setPositionOnCurve(particleData.curve[from], from * this.curveSeg, particleData.posStart, particleData.posEnd, particleData.cp1, particleData.cp2);\r\n            }\r\n            if (to !== this.curveLen - 1) {\r\n                setPositionOnCurve(particleData.curve[to], to * this.curveSeg, particleData.posStart, particleData.posEnd, particleData.cp1, particleData.cp2);\r\n            }\r\n            setPositionOnLine(result, (t % this.curveSeg) / this.curveSeg, particleData.curve[from], particleData.curve[to]);\r\n        }\r\n        else {\r\n            setPositionOnLine(result, t, particleData.posStart, particleData.posEnd);\r\n        }\r\n        if (particleData.rotationSpeed !== 0) {\r\n            result.rotation += particleData.rotationSpeed;\r\n        }\r\n        else {\r\n            result.rotation = 0;\r\n        }\r\n        if (particleData.tint) {\r\n            if (Array.isArray(particleData.tint)) {\r\n                const seg = 1 / (particleData.tint.length - 1);\r\n                result.tint = particleData.tint[Math.floor(t / seg)];\r\n            }\r\n            else {\r\n                result.tint = particleData.tint;\r\n            }\r\n        }\r\n    }\r\n    kill() {\r\n        this.particles.length = 0;\r\n        this.cb = null;\r\n    }\r\n}\r\nconst getRotationOnCurve = (t, p1, p2, cp1, cp2) => {\r\n    const t2 = t * t;\r\n    const dx = 3 * Math.pow(1 - t, 2) * (cp1.x - p1.x) + 6 * (1 - t) * t * (cp2.x - cp1.x) + 3 * t2 * (p1.y - cp2.x);\r\n    const dy = 3 * Math.pow(1 - t, 2) * (cp1.y - p1.y) + 6 * (1 - t) * t * (cp2.y - cp1.y) + 3 * t2 * (p2.y - cp2.y);\r\n    return Math.atan2(dx, dy);\r\n};\r\nconst hexToRgb = (color) => {\r\n    const arr = [];\r\n    for (let i = 2; i >= 0; i--) {\r\n        const c = color.substring(color.length - i * 2 - 2, color.length - i * 2);\r\n        arr.push(parseInt(c, 16));\r\n    }\r\n    return arr;\r\n};\r\nconst rgbToHex = (arr, prefix) => {\r\n    return prefix + arr.map(v => hexValue(v)).join(\"\");\r\n};\r\nconst getInterpolatedColors = (hexArr, steps) => {\r\n    const arr = hexArr.map(hex => hexToHsl(hex));\r\n    const out = [];\r\n    const step = 1 / steps;\r\n    for (let i = 0; i < steps + 1; i++) {\r\n        const t = Math.min(step * i, 1);\r\n        const seg = 1 / (arr.length - 1);\r\n        const index = Math.min(Math.floor(t / seg), arr.length - 2);\r\n        const c1 = arr[index];\r\n        const c2 = arr[index + 1];\r\n        out.push(hslToHex(c1.map((c, i) => interpolate(t, c, c2[i], i === 0))));\r\n    }\r\n    return out;\r\n};\r\nconst interpolate = (t, v1, v2, minDist) => {\r\n    if (!minDist) {\r\n        return v1 + (v2 - v1) * t;\r\n    }\r\n    const a = Math.min(v1, v2);\r\n    const b = Math.max(v1, v2);\r\n    const dist1 = b - a;\r\n    const dist2 = 1 - b + a;\r\n    if (dist1 < dist2) {\r\n        return a + dist1 * t;\r\n    }\r\n    else {\r\n        return (b + dist2 * t) % 1;\r\n    }\r\n};\r\nconst hexToHsl = (hex) => {\r\n    const r = parseInt(hex.substring(hex.length - 6, hex.length - 4), 16) / 255;\r\n    const g = parseInt(hex.substring(hex.length - 4, hex.length - 2), 16) / 255;\r\n    const b = parseInt(hex.substring(hex.length - 2, hex.length), 16) / 255;\r\n    const max = Math.max(r, g, b);\r\n    const min = Math.min(r, g, b);\r\n    let l = (max + min) / 2;\r\n    let s = 0;\r\n    let h = 0;\r\n    if (max !== min) {\r\n        const d = max - min;\r\n        s = l < 0.5 ? d / (max + min) : d / (2 - max - min);\r\n        if (r == max) {\r\n            h = (g - b) / d + (g < b ? 6 : 0);\r\n        }\r\n        else if (g == max) {\r\n            h = 2 + (b - r) / d;\r\n        }\r\n        else {\r\n            h = 4 + (r - g) / d;\r\n        }\r\n    }\r\n    h /= 6;\r\n    return [h, s, l];\r\n};\r\nconst hslToHex = (arr) => {\r\n    let h = arr[0];\r\n    let s = arr[1];\r\n    let l = arr[2];\r\n    let r, g, b;\r\n    if (s == 0) {\r\n        r = g = b = l;\r\n    }\r\n    else {\r\n        let q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n        let p = 2 * l - q;\r\n        r = Math.round(hueToRgb(h + 1 / 3, p, q) * 255);\r\n        g = Math.round(hueToRgb(h, p, q) * 255);\r\n        b = Math.round(hueToRgb(h - 1 / 3, p, q) * 255);\r\n    }\r\n    return \"0x\" + hexValue(r) + hexValue(g) + hexValue(b);\r\n};\r\nconst hueToRgb = (t, p, q) => {\r\n    if (t < 0) {\r\n        t += 1;\r\n    }\r\n    if (t > 1) {\r\n        t -= 1;\r\n    }\r\n    if (t < 1 / 6) {\r\n        return p + (q - p) * 6 * t;\r\n    }\r\n    if (t < 1 / 2) {\r\n        return q;\r\n    }\r\n    if (t < 2 / 3) {\r\n        return p + (q - p) * (2 / 3 - t) * 6;\r\n    }\r\n    return p;\r\n};\r\nconst hexValue = (v) => {\r\n    return (\"0\" + v.toString(16)).slice(-2);\r\n};\r\nconst degreeToRadians = (degrees) => {\r\n    return degrees * Math.PI / 180;\r\n};\r\nconst radiansToDegree = (radians) => {\r\n    return radians * 180 / Math.PI;\r\n};\r\nconst setPositionOnLine = (target, t, p0, p1) => {\r\n    target.x = p0.x + (p1.x - p0.x) * t;\r\n    target.y = p0.y + (p1.y - p0.y) * t;\r\n};\r\nconst setPositionOnCurve = (target, t, p1, p2, cp1, cp2) => {\r\n    const t2 = t * t;\r\n    const t3 = t * t * t;\r\n    target.x = Math.pow(1 - t, 3) * p1.x + 3 * Math.pow(1 - t, 2) * t * cp1.x + 3 * (1 - t) * t2 * cp2.x + t3 * p2.x;\r\n    target.y = Math.pow(1 - t, 3) * p1.y + 3 * Math.pow(1 - t, 2) * t * cp1.y + 3 * (1 - t) * t2 * cp2.y + t3 * p2.y;\r\n};\r\nexport { Particles };\r\n"],"names":["Point","[object Object]","this","x","y","Particles","totalParticles","loop","config","cb","particles","time","delay","posStart","posEnd","curveLen","curveSeg","correctedTintArr","createParticles","i","particleResult","createParticle","alpha","particleData","result","updated","getDelay","duration","getDuration","push","scaleX","scaleY","rotation","tint","dt","count","forEach","t","updateParticleData","updateResult","length","onComplete","posStartX","value","posStartY","posEndX","posEndY","getValue","startX","startY","endX","endY","cp1","cp2","cp1Mag","cp2Mag","dx","dy","ang","Math","atan2","angle1","degreeToRadians","angle2","PI","dist","sqrt","sin","cos","curve","alphaFrom","alphaTo","alphaYoYo","tintInterpolate","Array","isArray","getInterpolatedColors","scaleFrom","scaleTo","scaleYoYo","rotationSpeed","key","arr","index","floor","random","min","max","yoyoTime","interpolate","from","to","undefined","setPositionOnCurve","setPositionOnLine","seg","hexArr","steps","map","hex","hexToHsl","out","step","c1","c2","hslToHex","c","v1","v2","minDist","a","b","dist1","dist2","r","parseInt","substring","g","l","s","h","d","q","p","round","hueToRgb","hexValue","v","toString","slice","degrees","target","p0","p1","p2","t2","t3","pow"],"mappings":"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"}