{"version":3,"file":"dizzy-particles.min.js","sources":["../src/index.js"],"sourcesContent":["class Point {\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n    }\r\n}\r\n;\r\nclass Particle {\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.alpha = 1;\r\n        this.scaleX = 0;\r\n        this.scaleY = 0;\r\n        this.rotation = 0;\r\n        this.tint = \"0xff0000\";\r\n    }\r\n}\r\nexport default class Particles {\r\n    constructor(totalParticles, loop, config, cb) {\r\n        this.totalParticles = totalParticles;\r\n        this.loop = loop;\r\n        this.config = config;\r\n        this.cb = cb;\r\n        this.particles = [];\r\n        this.particleDataArr = [];\r\n        this.time = 0;\r\n        this.delay = 0;\r\n        this.posStart = { x: 0, y: 0 };\r\n        this.posEnd = { x: 0, y: 0 };\r\n        this.curveLen = 20;\r\n        this.curveSeg = 1 / (this.curveLen - 1);\r\n        this.correctedTintArr = null;\r\n        this.createParticles(totalParticles);\r\n    }\r\n    createParticles(totalParticles) {\r\n        for (let i = 0; i < totalParticles; i++) {\r\n            const particle = new Particle();\r\n            particle.alpha = 0;\r\n            this.particles[i] = particle;\r\n            this.particleDataArr.push({\r\n                particle: this.particles[i],\r\n                configUpdated: false,\r\n                delay: this.getDelay(),\r\n                duration: this.getDuration(),\r\n                config: {}\r\n            });\r\n        }\r\n    }\r\n    update(dt) {\r\n        const time = this.time;\r\n        let count = 0;\r\n        this.particleDataArr.forEach(item => {\r\n            if (item.duration === 0) {\r\n                count++;\r\n                return;\r\n            }\r\n            const t = (time - item.delay) / item.duration;\r\n            if (t >= 0 && t <= 1) {\r\n                item.particle.alpha = 1;\r\n                if (!item.configUpdated) {\r\n                    item.configUpdated = true;\r\n                    this.updateConfig(item.config);\r\n                }\r\n                this.onUpdateParticle(item.particle, item.config, t);\r\n            }\r\n            else {\r\n                item.configUpdated = false;\r\n                item.particle.alpha = 0;\r\n            }\r\n            if (time >= item.delay + item.duration) {\r\n                if (this.loop) {\r\n                    item.duration = this.getDuration();\r\n                    item.delay = this.getDelay();\r\n                }\r\n                else {\r\n                    count++;\r\n                    item.duration = 0;\r\n                    item.particle.alpha = 0;\r\n                }\r\n            }\r\n        });\r\n        this.delay = 0;\r\n        this.time += dt;\r\n        if (count >= this.particleDataArr.length) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n    reset() {\r\n        this.time = 0;\r\n        this.delay = 0;\r\n        this.particleDataArr.forEach(particleData => {\r\n            particleData.configUpdated = false;\r\n            particleData.delay = this.getDelay(),\r\n                particleData.duration = this.getDuration();\r\n            if (particleData.particle) {\r\n                particleData.particle.alpha = 0;\r\n                particleData.particle.x = 0;\r\n                particleData.particle.y = 0;\r\n            }\r\n        });\r\n    }\r\n    onComplete() {\r\n        if (this.cb) {\r\n            this.cb();\r\n        }\r\n    }\r\n    set posStartX(value) {\r\n        this.posStart.x = value;\r\n    }\r\n    set posStartY(value) {\r\n        this.posStart.y = value;\r\n    }\r\n    set posEndX(value) {\r\n        this.posEnd.x = value;\r\n    }\r\n    set posEndY(value) {\r\n        this.posEnd.y = value;\r\n    }\r\n    setPosStart(x, y) {\r\n        this.posStart.x = x;\r\n        this.posStart.y = y;\r\n    }\r\n    setPosEnd(x, y) {\r\n        this.posEnd.x = x;\r\n        this.posEnd.y = y;\r\n    }\r\n    setData(config) {\r\n        this.correctedTintArr = null;\r\n        this.config = config;\r\n    }\r\n    getDuration() {\r\n        return this.getValue(\"duration\");\r\n    }\r\n    getDelay() {\r\n        this.delay += this.getValue(\"delay\");\r\n        return this.time + this.delay;\r\n    }\r\n    updateConfig(target) {\r\n        const startX = this.posStart.x + this.getValue(\"posStartOffsetX\");\r\n        const startY = this.posStart.y + this.getValue(\"posStartOffsetY\");\r\n        const endX = this.posEnd.x + this.getValue(\"posEndOffsetX\");\r\n        const endY = this.posEnd.y + this.getValue(\"posEndOffsetY\");\r\n        target.posStart = { x: startX, y: startY };\r\n        target.posEnd = { x: endX, y: endY };\r\n        target.cp1 = null;\r\n        target.cp2 = null;\r\n        const cp1Mag = this.getValue(\"posControlPoint1Mag\");\r\n        const cp2Mag = this.getValue(\"posControlPoint2Mag\");\r\n        if (cp1Mag !== 0 || cp2Mag !== 0) {\r\n            let dx = endX - startX;\r\n            let dy = endY - startY;\r\n            let ang = Math.atan2(dx, dy);\r\n            let angle1 = ang + degreeToRadians(this.getValue(\"posControlPoint1Angle\"));\r\n            let angle2 = -(Math.PI - ang) + degreeToRadians(this.getValue(\"posControlPoint2Angle\"));\r\n            let dist = Math.sqrt(dx * dx + dy * dy);\r\n            target.cp1 = { x: startX + Math.sin(angle1) * dist * cp1Mag, y: startY + Math.cos(angle1) * dist * cp1Mag };\r\n            target.cp2 = { x: endX + Math.sin(angle2) * dist * cp2Mag, y: endY + Math.cos(angle2) * dist * cp2Mag };\r\n            if (target.curve) {\r\n                target.curve.length = 0;\r\n            }\r\n            else {\r\n                target.curve = [];\r\n            }\r\n        }\r\n        target.alphaFrom = this.getValue(\"alphaFrom\");\r\n        target.alphaTo = this.getValue(\"alphaTo\");\r\n        target.alphaYoYo = this.getValue(\"alphaYoYo\");\r\n        if (this.config.tint) {\r\n            if (this.config.tintInterpolate && Array.isArray(this.config.tint) && this.config.tint.length > 1) {\r\n                if (!this.correctedTintArr) {\r\n                    this.correctedTintArr = getInterpolatedColors(this.config.tint, 5);\r\n                }\r\n                target.tint = this.correctedTintArr;\r\n            }\r\n            else {\r\n                target.tint = this.getValue(\"tint\");\r\n            }\r\n        }\r\n        target.scaleFrom = this.getValue(\"scaleFrom\");\r\n        target.scaleTo = this.getValue(\"scaleTo\");\r\n        target.scaleYoYo = this.getValue(\"scaleYoYo\");\r\n        target.rotationSpeed = degreeToRadians(this.getValue(\"rotationSpeed\"));\r\n    }\r\n    getValue(key) {\r\n        if (Array.isArray(this.config[key])) {\r\n            const arr = this.config[key];\r\n            const index = arr.length > 1 ? Math.floor(Math.random() * arr.length) : 0;\r\n            if (Array.isArray(arr[index])) {\r\n                const min = arr[index][0];\r\n                const max = arr[index][1];\r\n                return Math.random() * (max - min) + min;\r\n            }\r\n            else {\r\n                return arr[index];\r\n            }\r\n        }\r\n        else {\r\n            return this.config[key] || 0;\r\n        }\r\n    }\r\n    onUpdateParticle(particle, config, t) {\r\n        const yoyoTime = t * (1 - t) * 2;\r\n        particle.alpha = config.alphaFrom + (config.alphaTo - config.alphaFrom) * (config.alphaYoYo ? yoyoTime : t);\r\n        particle.scaleX = particle.scaleY = interpolate(config.scaleYoYo ? yoyoTime : t, config.scaleFrom, config.scaleTo);\r\n        if (config.curve) {\r\n            const from = Math.floor(t / this.curveSeg);\r\n            const to = from + 1;\r\n            if (config.curve[from] === undefined) {\r\n                config.curve[from] = from === 0 ? config.posStart : new Point();\r\n            }\r\n            if (config.curve[to] === undefined) {\r\n                config.curve[to] = to === this.curveLen - 1 ? config.posEnd : new Point();\r\n            }\r\n            if (from !== 0) {\r\n                setPositionOnCurve(config.curve[from], from * this.curveSeg, config.posStart, config.posEnd, config.cp1, config.cp2);\r\n            }\r\n            if (to !== this.curveLen - 1) {\r\n                setPositionOnCurve(config.curve[to], to * this.curveSeg, config.posStart, config.posEnd, config.cp1, config.cp2);\r\n            }\r\n            setPositionOnLine(particle, (t % this.curveSeg) / this.curveSeg, config.curve[from], config.curve[to]);\r\n        }\r\n        else {\r\n            setPositionOnLine(particle, t, config.posStart, config.posEnd);\r\n        }\r\n        if (config.rotationSpeed !== 0) {\r\n            particle.rotation += config.rotationSpeed;\r\n        }\r\n        else {\r\n            particle.rotation = 0;\r\n        }\r\n        if (config.tint) {\r\n            if (Array.isArray(config.tint)) {\r\n                const seg = 1 / (config.tint.length - 1);\r\n                particle.tint = config.tint[Math.floor(t / seg)];\r\n            }\r\n            else {\r\n                particle.tint = config.tint;\r\n            }\r\n        }\r\n    }\r\n    kill() {\r\n        this.particleDataArr.length = 0;\r\n        this.cb = null;\r\n    }\r\n}\r\nconst getRotationOnCurve = (t, p1, p2, cp1, cp2) => {\r\n    const t2 = t * t;\r\n    const dx = 3 * Math.pow(1 - t, 2) * (cp1.x - p1.x) + 6 * (1 - t) * t * (cp2.x - cp1.x) + 3 * t2 * (p1.y - cp2.x);\r\n    const dy = 3 * Math.pow(1 - t, 2) * (cp1.y - p1.y) + 6 * (1 - t) * t * (cp2.y - cp1.y) + 3 * t2 * (p2.y - cp2.y);\r\n    return Math.atan2(dx, dy);\r\n};\r\nconst hexToRgb = (color) => {\r\n    const arr = [];\r\n    for (let i = 2; i >= 0; i--) {\r\n        const c = color.substring(color.length - i * 2 - 2, color.length - i * 2);\r\n        arr.push(parseInt(c, 16));\r\n    }\r\n    return arr;\r\n};\r\nconst rgbToHex = (arr, prefix) => {\r\n    return prefix + arr.map(v => hexValue(v)).join(\"\");\r\n};\r\nconst getInterpolatedColors = (hexArr, steps) => {\r\n    const arr = hexArr.map(hex => hexToHsl(hex));\r\n    const out = [];\r\n    const step = 1 / steps;\r\n    for (let i = 0; i < steps + 1; i++) {\r\n        const t = Math.min(step * i, 1);\r\n        const seg = 1 / (arr.length - 1);\r\n        const index = Math.min(Math.floor(t / seg), arr.length - 2);\r\n        const c1 = arr[index];\r\n        const c2 = arr[index + 1];\r\n        out.push(hslToHex(c1.map((c, i) => interpolate(t, c, c2[i], i === 0))));\r\n    }\r\n    return out;\r\n};\r\nconst interpolate = (t, v1, v2, minDist) => {\r\n    if (!minDist) {\r\n        return v1 + (v2 - v1) * t;\r\n    }\r\n    const a = Math.min(v1, v2);\r\n    const b = Math.max(v1, v2);\r\n    const dist1 = b - a;\r\n    const dist2 = 1 - b + a;\r\n    if (dist1 < dist2) {\r\n        return a + dist1 * t;\r\n    }\r\n    else {\r\n        return (b + dist2 * t) % 1;\r\n    }\r\n};\r\nconst hexToHsl = (hex) => {\r\n    const r = parseInt(hex.substring(hex.length - 6, hex.length - 4), 16) / 255;\r\n    const g = parseInt(hex.substring(hex.length - 4, hex.length - 2), 16) / 255;\r\n    const b = parseInt(hex.substring(hex.length - 2, hex.length), 16) / 255;\r\n    const max = Math.max(r, g, b);\r\n    const min = Math.min(r, g, b);\r\n    let l = (max + min) / 2;\r\n    let s = 0;\r\n    let h = 0;\r\n    if (max !== min) {\r\n        const d = max - min;\r\n        s = l < 0.5 ? d / (max + min) : d / (2 - max - min);\r\n        if (r == max) {\r\n            h = (g - b) / d + (g < b ? 6 : 0);\r\n        }\r\n        else if (g == max) {\r\n            h = 2 + (b - r) / d;\r\n        }\r\n        else {\r\n            h = 4 + (r - g) / d;\r\n        }\r\n    }\r\n    h /= 6;\r\n    return [h, s, l];\r\n};\r\nconst hslToHex = (arr) => {\r\n    let h = arr[0];\r\n    let s = arr[1];\r\n    let l = arr[2];\r\n    let r, g, b;\r\n    if (s == 0) {\r\n        r = g = b = l;\r\n    }\r\n    else {\r\n        let q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n        let p = 2 * l - q;\r\n        r = Math.round(hueToRgb(h + 1 / 3, p, q) * 255);\r\n        g = Math.round(hueToRgb(h, p, q) * 255);\r\n        b = Math.round(hueToRgb(h - 1 / 3, p, q) * 255);\r\n    }\r\n    return \"0x\" + hexValue(r) + hexValue(g) + hexValue(b);\r\n};\r\nconst hueToRgb = (t, p, q) => {\r\n    if (t < 0) {\r\n        t += 1;\r\n    }\r\n    if (t > 1) {\r\n        t -= 1;\r\n    }\r\n    if (t < 1 / 6) {\r\n        return p + (q - p) * 6 * t;\r\n    }\r\n    if (t < 1 / 2) {\r\n        return q;\r\n    }\r\n    if (t < 2 / 3) {\r\n        return p + (q - p) * (2 / 3 - t) * 6;\r\n    }\r\n    return p;\r\n};\r\nconst hexValue = (v) => {\r\n    return (\"0\" + v.toString(16)).slice(-2);\r\n};\r\nconst degreeToRadians = (degrees) => {\r\n    return degrees * Math.PI / 180;\r\n};\r\nconst radiansToDegree = (radians) => {\r\n    return radians * 180 / Math.PI;\r\n};\r\nconst setPositionOnLine = (target, t, p0, p1) => {\r\n    target.x = p0.x + (p1.x - p0.x) * t;\r\n    target.y = p0.y + (p1.y - p0.y) * t;\r\n};\r\nconst setPositionOnCurve = (target, t, p1, p2, cp1, cp2) => {\r\n    const t2 = t * t;\r\n    const t3 = t * t * t;\r\n    target.x = Math.pow(1 - t, 3) * p1.x + 3 * Math.pow(1 - t, 2) * t * cp1.x + 3 * (1 - t) * t2 * cp2.x + t3 * p2.x;\r\n    target.y = Math.pow(1 - t, 3) * p1.y + 3 * Math.pow(1 - t, 2) * t * cp1.y + 3 * (1 - t) * t2 * cp2.y + t3 * p2.y;\r\n};\r\n"],"names":["Point","[object Object]","this","x","y","Particle","alpha","scaleX","scaleY","rotation","tint","getInterpolatedColors","hexArr","steps","arr","map","hex","hexToHsl","out","step","i","t","Math","min","seg","length","index","floor","c1","c2","push","hslToHex","c","interpolate","v1","v2","minDist","a","b","max","dist1","dist2","r","parseInt","substring","g","l","s","h","d","q","p","round","hueToRgb","hexValue","v","toString","slice","degreeToRadians","degrees","PI","setPositionOnLine","target","p0","p1","setPositionOnCurve","p2","cp1","cp2","t2","t3","pow","totalParticles","loop","config","cb","particles","particleDataArr","time","delay","posStart","posEnd","curveLen","curveSeg","correctedTintArr","createParticles","particle","configUpdated","getDelay","duration","getDuration","dt","count","forEach","item","updateConfig","onUpdateParticle","onComplete","particleData","posStartX","value","posStartY","posEndX","posEndY","getValue","startX","startY","endX","endY","cp1Mag","cp2Mag","dx","dy","ang","atan2","angle1","angle2","dist","sqrt","sin","cos","curve","alphaFrom","alphaTo","alphaYoYo","tintInterpolate","Array","isArray","scaleFrom","scaleTo","scaleYoYo","rotationSpeed","key","random","yoyoTime","from","to","undefined"],"mappings":"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"}